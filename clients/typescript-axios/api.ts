/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * API Gateway
 *
 * The version of the OpenAPI document: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MerchantsApplicationsValidateGet200Response
 */
export interface MerchantsApplicationsValidateGet200Response {
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsApplicationsValidateGet200Response
     */
    'is_sandbox'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MerchantsApplicationsValidateGet200Response
     */
    'key_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsApplicationsValidateGet200Response
     */
    'merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsApplicationsValidateGet200Response
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsApplicationsValidateGet200Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface MerchantsMerchantIdApplicationsGet200Response
 */
export interface MerchantsMerchantIdApplicationsGet200Response {
    /**
     * 
     * @type {Set<MerchantsMerchantIdApplicationsGet200ResponseDataInner>}
     * @memberof MerchantsMerchantIdApplicationsGet200Response
     */
    'data'?: Set<MerchantsMerchantIdApplicationsGet200ResponseDataInner>;
}
/**
 * 
 * @export
 * @interface MerchantsMerchantIdApplicationsGet200ResponseDataInner
 */
export interface MerchantsMerchantIdApplicationsGet200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsGet200ResponseDataInner
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsGet200ResponseDataInner
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsMerchantIdApplicationsGet200ResponseDataInner
     */
    'is_sandbox': boolean;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsGet200ResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsGet200ResponseDataInner
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsGet200ResponseDataInner
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface MerchantsMerchantIdApplicationsPost200Response
 */
export interface MerchantsMerchantIdApplicationsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'is_sandbox'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'private_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'public_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'signing_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface MerchantsMerchantIdApplicationsPostRequest
 */
export interface MerchantsMerchantIdApplicationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPostRequest
     */
    'expire_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsMerchantIdApplicationsPostRequest
     */
    'is_sandbox'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPostRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UsersGet401Response
 */
export interface UsersGet401Response {
    /**
     * 
     * @type {string}
     * @memberof UsersGet401Response
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersGet401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UsersLoginDeviceFingerprintPost200Response
 */
export interface UsersLoginDeviceFingerprintPost200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersLoginDeviceFingerprintPost200Response
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersLoginDeviceFingerprintPost200Response
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersLoginDeviceFingerprintPost200Response
     */
    'user-deuna'?: boolean;
}
/**
 * 
 * @export
 * @interface UsersLoginPost200Response
 */
export interface UsersLoginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersLoginPost200Response
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersLoginPost200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface UsersLoginPostRequest
 */
export interface UsersLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersLoginPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UsersLoginPostRequest
     */
    'otp'?: string;
}
/**
 * 
 * @export
 * @interface UsersMeGet200Response
 */
export interface UsersMeGet200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200Response
     */
    'created_at'?: string;
    /**
     * 
     * @type {any}
     * @memberof UsersMeGet200Response
     */
    'deleted_at'?: any;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200Response
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200Response
     */
    'id'?: string;
    /**
     * 
     * @type {Set<UsersMeGet200ResponseIdentityProvidersInner>}
     * @memberof UsersMeGet200Response
     */
    'identity_providers'?: Set<UsersMeGet200ResponseIdentityProvidersInner>;
    /**
     * 
     * @type {boolean}
     * @memberof UsersMeGet200Response
     */
    'is_guest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersMeGet200Response
     */
    'is_phone_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200Response
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200Response
     */
    'merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200Response
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200Response
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface UsersMeGet200ResponseIdentityProvidersInner
 */
export interface UsersMeGet200ResponseIdentityProvidersInner {
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200ResponseIdentityProvidersInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {any}
     * @memberof UsersMeGet200ResponseIdentityProvidersInner
     */
    'deleted_at'?: any;
    /**
     * 
     * @type {number}
     * @memberof UsersMeGet200ResponseIdentityProvidersInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200ResponseIdentityProvidersInner
     */
    'provider_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeGet200ResponseIdentityProvidersInner
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface UsersRegisterPost200Response
 */
export interface UsersRegisterPost200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterPost200Response
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterPost200Response
     */
    'user_id'?: string;
}
/**
 * Response of an unauthorized request this problem is due to the invalid X-API-KEY or by the **Bearer-Auth
 * @export
 * @interface UsersRegisterPost401Response
 */
export interface UsersRegisterPost401Response {
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterPost401Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface UsersRegisterPostRequest
 */
export interface UsersRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterPostRequest
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterPostRequest
     */
    'identity_document'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterPostRequest
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof UsersRegisterPostRequest
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface UsersRequestCodePostRequest
 */
export interface UsersRequestCodePostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersRequestCodePostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsCardIdGet200Response
 */
export interface UsersUserIdCardsCardIdGet200Response {
    /**
     * 
     * @type {UsersUserIdCardsCardIdGet200ResponseData}
     * @memberof UsersUserIdCardsCardIdGet200Response
     */
    'data'?: UsersUserIdCardsCardIdGet200ResponseData;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsCardIdGet200ResponseData
 */
export interface UsersUserIdCardsCardIdGet200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'card_holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'card_holder_dni'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'first_six'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'is_valid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'last_four'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'verified_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'verified_by'?: string;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsGet200Response
 */
export interface UsersUserIdCardsGet200Response {
    /**
     * 
     * @type {Array<UsersUserIdCardsGet200ResponseDataInner>}
     * @memberof UsersUserIdCardsGet200Response
     */
    'data'?: Array<UsersUserIdCardsGet200ResponseDataInner>;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsGet200ResponseDataInner
 */
export interface UsersUserIdCardsGet200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'card_holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'card_holder_dni'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'first_six'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'is_valid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'last_four'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'verified_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'verified_by'?: string;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsPost200Response
 */
export interface UsersUserIdCardsPost200Response {
    /**
     * 
     * @type {UsersUserIdCardsPost200ResponseData}
     * @memberof UsersUserIdCardsPost200Response
     */
    'data'?: UsersUserIdCardsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsPost200ResponseData
 */
export interface UsersUserIdCardsPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'card_holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'card_holder_dni'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'first_six'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'is_valid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'last_four'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'verified_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'verified_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPost200ResponseData
     */
    'verified_with_transaction_id'?: string;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsPostRequest
 */
export interface UsersUserIdCardsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'card_cvv'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'card_holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'card_holder_dni'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'card_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'expiry_month'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'expiry_year'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsPostRequest
     */
    'zip'?: string;
}

/**
 * MerchantApplicationApi - axios parameter creator
 * @export
 */
export const MerchantApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validate application
         * @summary Validate Application
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsApplicationsValidateGet: async (xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/applications/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get application by ID
         * @summary Get Application
         * @param {string} merchantId 
         * @param {string} applicationId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsApplicationIdGet: async (merchantId: string, applicationId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('merchantsMerchantIdApplicationsApplicationIdGet', 'merchantId', merchantId)
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('merchantsMerchantIdApplicationsApplicationIdGet', 'applicationId', applicationId)
            const localVarPath = `/merchants/{merchant_id}/applications/{application_id}`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)))
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get applications of merchant
         * @summary Get Applications
         * @param {string} merchantId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsGet: async (merchantId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('merchantsMerchantIdApplicationsGet', 'merchantId', merchantId)
            const localVarPath = `/merchants/{merchant_id}/applications`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create application
         * @summary Create Application
         * @param {string} merchantId 
         * @param {string} [authorization] 
         * @param {MerchantsMerchantIdApplicationsPostRequest} [merchantsMerchantIdApplicationsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsPost: async (merchantId: string, authorization?: string, merchantsMerchantIdApplicationsPostRequest?: MerchantsMerchantIdApplicationsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('merchantsMerchantIdApplicationsPost', 'merchantId', merchantId)
            const localVarPath = `/merchants/{merchant_id}/applications`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(merchantsMerchantIdApplicationsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantApplicationApi - functional programming interface
 * @export
 */
export const MerchantApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * Validate application
         * @summary Validate Application
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsApplicationsValidateGet(xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantsApplicationsValidateGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantsApplicationsValidateGet(xApiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get application by ID
         * @summary Get Application
         * @param {string} merchantId 
         * @param {string} applicationId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsApplicationIdGet(merchantId: string, applicationId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantsMerchantIdApplicationsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantsMerchantIdApplicationsApplicationIdGet(merchantId, applicationId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get applications of merchant
         * @summary Get Applications
         * @param {string} merchantId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsGet(merchantId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantsMerchantIdApplicationsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantsMerchantIdApplicationsGet(merchantId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create application
         * @summary Create Application
         * @param {string} merchantId 
         * @param {string} [authorization] 
         * @param {MerchantsMerchantIdApplicationsPostRequest} [merchantsMerchantIdApplicationsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsPost(merchantId: string, authorization?: string, merchantsMerchantIdApplicationsPostRequest?: MerchantsMerchantIdApplicationsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantsMerchantIdApplicationsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantsMerchantIdApplicationsPost(merchantId, authorization, merchantsMerchantIdApplicationsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantApplicationApi - factory interface
 * @export
 */
export const MerchantApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantApplicationApiFp(configuration)
    return {
        /**
         * Validate application
         * @summary Validate Application
         * @param {MerchantApplicationApiMerchantsApplicationsValidateGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsApplicationsValidateGet(requestParameters: MerchantApplicationApiMerchantsApplicationsValidateGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MerchantsApplicationsValidateGet200Response> {
            return localVarFp.merchantsApplicationsValidateGet(requestParameters.xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get application by ID
         * @summary Get Application
         * @param {MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsApplicationIdGet(requestParameters: MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantsMerchantIdApplicationsPost200Response> {
            return localVarFp.merchantsMerchantIdApplicationsApplicationIdGet(requestParameters.merchantId, requestParameters.applicationId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get applications of merchant
         * @summary Get Applications
         * @param {MerchantApplicationApiMerchantsMerchantIdApplicationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsGet(requestParameters: MerchantApplicationApiMerchantsMerchantIdApplicationsGetRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantsMerchantIdApplicationsGet200Response> {
            return localVarFp.merchantsMerchantIdApplicationsGet(requestParameters.merchantId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Create application
         * @summary Create Application
         * @param {MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsPost(requestParameters: MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantsMerchantIdApplicationsPost200Response> {
            return localVarFp.merchantsMerchantIdApplicationsPost(requestParameters.merchantId, requestParameters.authorization, requestParameters.merchantsMerchantIdApplicationsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for merchantsApplicationsValidateGet operation in MerchantApplicationApi.
 * @export
 * @interface MerchantApplicationApiMerchantsApplicationsValidateGetRequest
 */
export interface MerchantApplicationApiMerchantsApplicationsValidateGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantApplicationApiMerchantsApplicationsValidateGet
     */
    readonly xApiKey?: string
}

/**
 * Request parameters for merchantsMerchantIdApplicationsApplicationIdGet operation in MerchantApplicationApi.
 * @export
 * @interface MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGetRequest
 */
export interface MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGet
     */
    readonly merchantId: string

    /**
     * 
     * @type {string}
     * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGet
     */
    readonly applicationId: string

    /**
     * 
     * @type {string}
     * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGet
     */
    readonly authorization?: string
}

/**
 * Request parameters for merchantsMerchantIdApplicationsGet operation in MerchantApplicationApi.
 * @export
 * @interface MerchantApplicationApiMerchantsMerchantIdApplicationsGetRequest
 */
export interface MerchantApplicationApiMerchantsMerchantIdApplicationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsGet
     */
    readonly merchantId: string

    /**
     * 
     * @type {string}
     * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsGet
     */
    readonly authorization?: string
}

/**
 * Request parameters for merchantsMerchantIdApplicationsPost operation in MerchantApplicationApi.
 * @export
 * @interface MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest
 */
export interface MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsPost
     */
    readonly merchantId: string

    /**
     * 
     * @type {string}
     * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsPost
     */
    readonly authorization?: string

    /**
     * 
     * @type {MerchantsMerchantIdApplicationsPostRequest}
     * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsPost
     */
    readonly merchantsMerchantIdApplicationsPostRequest?: MerchantsMerchantIdApplicationsPostRequest
}

/**
 * MerchantApplicationApi - object-oriented interface
 * @export
 * @class MerchantApplicationApi
 * @extends {BaseAPI}
 */
export class MerchantApplicationApi extends BaseAPI {
    /**
     * Validate application
     * @summary Validate Application
     * @param {MerchantApplicationApiMerchantsApplicationsValidateGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApi
     */
    public merchantsApplicationsValidateGet(requestParameters: MerchantApplicationApiMerchantsApplicationsValidateGetRequest = {}, options?: AxiosRequestConfig) {
        return MerchantApplicationApiFp(this.configuration).merchantsApplicationsValidateGet(requestParameters.xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get application by ID
     * @summary Get Application
     * @param {MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApi
     */
    public merchantsMerchantIdApplicationsApplicationIdGet(requestParameters: MerchantApplicationApiMerchantsMerchantIdApplicationsApplicationIdGetRequest, options?: AxiosRequestConfig) {
        return MerchantApplicationApiFp(this.configuration).merchantsMerchantIdApplicationsApplicationIdGet(requestParameters.merchantId, requestParameters.applicationId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get applications of merchant
     * @summary Get Applications
     * @param {MerchantApplicationApiMerchantsMerchantIdApplicationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApi
     */
    public merchantsMerchantIdApplicationsGet(requestParameters: MerchantApplicationApiMerchantsMerchantIdApplicationsGetRequest, options?: AxiosRequestConfig) {
        return MerchantApplicationApiFp(this.configuration).merchantsMerchantIdApplicationsGet(requestParameters.merchantId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create application
     * @summary Create Application
     * @param {MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApi
     */
    public merchantsMerchantIdApplicationsPost(requestParameters: MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest, options?: AxiosRequestConfig) {
        return MerchantApplicationApiFp(this.configuration).merchantsMerchantIdApplicationsPost(requestParameters.merchantId, requestParameters.authorization, requestParameters.merchantsMerchantIdApplicationsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get If User Exists
         * @summary Get If User Exists
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login User
         * @summary Login User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginDeviceFingerprintPost: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, type?: string, loadProfileData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login/device-fingerprint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (loadProfileData !== undefined) {
                localVarQueryParameter['load_profile_data'] = loadProfileData;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (xSessionID != null) {
                localVarHeaderParameter['X-Session-ID'] = String(xSessionID);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [xRecaptchaToken] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {UsersLoginPostRequest} [usersLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginPost: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, xRecaptchaToken?: string, type?: string, loadProfileData?: string, usersLoginPostRequest?: UsersLoginPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (loadProfileData !== undefined) {
                localVarQueryParameter['load_profile_data'] = loadProfileData;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (xSessionID != null) {
                localVarHeaderParameter['X-Session-ID'] = String(xSessionID);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xRecaptchaToken != null) {
                localVarHeaderParameter['X-Recaptcha-Token'] = String(xRecaptchaToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a user of your business, this user once registered will belong to the DEUNA Network.
         * @summary Register User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {UsersRegisterPostRequest} [usersRegisterPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRegisterPost: async (xApiKey?: string, xMerchantId?: string, usersRegisterPostRequest?: UsersRegisterPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {UsersRequestCodePostRequest} [usersRequestCodePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRequestCodePost: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, type?: string, usersRequestCodePostRequest?: UsersRequestCodePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/request-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersRequestCodePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove card by identifier
         * @summary Remove card by identifier
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsCardIdDelete: async (userId: string, cardId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdCardsCardIdDelete', 'userId', userId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('usersUserIdCardsCardIdDelete', 'cardId', cardId)
            const localVarPath = `/users/{user_id}/cards/{card_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsCardIdGet: async (userId: string, cardId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdCardsCardIdGet', 'userId', userId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('usersUserIdCardsCardIdGet', 'cardId', cardId)
            const localVarPath = `/users/{user_id}/cards/{card_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} [authorization] 
         * @param {string} [xMerchantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsGet: async (userId: string, authorization?: string, xMerchantID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdCardsGet', 'userId', userId)
            const localVarPath = `/users/{user_id}/cards`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xMerchantID != null) {
                localVarHeaderParameter['X-Merchant-ID'] = String(xMerchantID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register user card
         * @summary Register user card
         * @param {string} userId 
         * @param {string} [authorization] 
         * @param {string} [xMerchantID] 
         * @param {UsersUserIdCardsPostRequest} [usersUserIdCardsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsPost: async (userId: string, authorization?: string, xMerchantID?: string, usersUserIdCardsPostRequest?: UsersUserIdCardsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdCardsPost', 'userId', userId)
            const localVarPath = `/users/{user_id}/cards`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xMerchantID != null) {
                localVarHeaderParameter['X-Merchant-ID'] = String(xMerchantID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersUserIdCardsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get If User Exists
         * @summary Get If User Exists
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(xApiKey, xMerchantId, xDeviceId, authorization, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Login User
         * @summary Login User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginDeviceFingerprintPost(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, type?: string, loadProfileData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersLoginDeviceFingerprintPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLoginDeviceFingerprintPost(xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, type, loadProfileData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [xRecaptchaToken] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {UsersLoginPostRequest} [usersLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginPost(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, xRecaptchaToken?: string, type?: string, loadProfileData?: string, usersLoginPostRequest?: UsersLoginPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLoginPost(xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, xRecaptchaToken, type, loadProfileData, usersLoginPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersMeGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(xApiKey, xMerchantId, xDeviceId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register a user of your business, this user once registered will belong to the DEUNA Network.
         * @summary Register User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {UsersRegisterPostRequest} [usersRegisterPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRegisterPost(xApiKey?: string, xMerchantId?: string, usersRegisterPostRequest?: UsersRegisterPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersRegisterPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRegisterPost(xApiKey, xMerchantId, usersRegisterPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {UsersRequestCodePostRequest} [usersRequestCodePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRequestCodePost(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, type?: string, usersRequestCodePostRequest?: UsersRequestCodePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRequestCodePost(xApiKey, xMerchantId, xDeviceId, authorization, type, usersRequestCodePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove card by identifier
         * @summary Remove card by identifier
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdCardsCardIdDelete(userId: string, cardId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdCardsCardIdDelete(userId, cardId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdCardsCardIdGet(userId: string, cardId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUserIdCardsCardIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdCardsCardIdGet(userId, cardId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} [authorization] 
         * @param {string} [xMerchantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdCardsGet(userId: string, authorization?: string, xMerchantID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUserIdCardsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdCardsGet(userId, authorization, xMerchantID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register user card
         * @summary Register user card
         * @param {string} userId 
         * @param {string} [authorization] 
         * @param {string} [xMerchantID] 
         * @param {UsersUserIdCardsPostRequest} [usersUserIdCardsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdCardsPost(userId: string, authorization?: string, xMerchantID?: string, usersUserIdCardsPostRequest?: UsersUserIdCardsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUserIdCardsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdCardsPost(userId, authorization, xMerchantID, usersUserIdCardsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Get If User Exists
         * @summary Get If User Exists
         * @param {UsersApiUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(requestParameters: UsersApiUsersGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersGet(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.authorization, requestParameters.email, options).then((request) => request(axios, basePath));
        },
        /**
         * Login User
         * @summary Login User
         * @param {UsersApiUsersLoginDeviceFingerprintPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginDeviceFingerprintPost(requestParameters: UsersApiUsersLoginDeviceFingerprintPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UsersLoginDeviceFingerprintPost200Response> {
            return localVarFp.usersLoginDeviceFingerprintPost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.xSessionID, requestParameters.authorization, requestParameters.type, requestParameters.loadProfileData, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {UsersApiUsersLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginPost(requestParameters: UsersApiUsersLoginPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UsersLoginPost200Response> {
            return localVarFp.usersLoginPost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.xSessionID, requestParameters.authorization, requestParameters.xRecaptchaToken, requestParameters.type, requestParameters.loadProfileData, requestParameters.usersLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {UsersApiUsersMeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(requestParameters: UsersApiUsersMeGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UsersMeGet200Response> {
            return localVarFp.usersMeGet(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a user of your business, this user once registered will belong to the DEUNA Network.
         * @summary Register User
         * @param {UsersApiUsersRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRegisterPost(requestParameters: UsersApiUsersRegisterPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UsersRegisterPost200Response> {
            return localVarFp.usersRegisterPost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.usersRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {UsersApiUsersRequestCodePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRequestCodePost(requestParameters: UsersApiUsersRequestCodePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersRequestCodePost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.authorization, requestParameters.type, requestParameters.usersRequestCodePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove card by identifier
         * @summary Remove card by identifier
         * @param {UsersApiUsersUserIdCardsCardIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsCardIdDelete(requestParameters: UsersApiUsersUserIdCardsCardIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersUserIdCardsCardIdDelete(requestParameters.userId, requestParameters.cardId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {UsersApiUsersUserIdCardsCardIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsCardIdGet(requestParameters: UsersApiUsersUserIdCardsCardIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersUserIdCardsCardIdGet200Response> {
            return localVarFp.usersUserIdCardsCardIdGet(requestParameters.userId, requestParameters.cardId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {UsersApiUsersUserIdCardsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsGet(requestParameters: UsersApiUsersUserIdCardsGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersUserIdCardsGet200Response> {
            return localVarFp.usersUserIdCardsGet(requestParameters.userId, requestParameters.authorization, requestParameters.xMerchantID, options).then((request) => request(axios, basePath));
        },
        /**
         * Register user card
         * @summary Register user card
         * @param {UsersApiUsersUserIdCardsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsPost(requestParameters: UsersApiUsersUserIdCardsPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersUserIdCardsPost200Response> {
            return localVarFp.usersUserIdCardsPost(requestParameters.userId, requestParameters.authorization, requestParameters.xMerchantID, requestParameters.usersUserIdCardsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersGetRequest
 */
export interface UsersApiUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersGet
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersGet
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersGet
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersGet
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersGet
     */
    readonly email?: string
}

/**
 * Request parameters for usersLoginDeviceFingerprintPost operation in UsersApi.
 * @export
 * @interface UsersApiUsersLoginDeviceFingerprintPostRequest
 */
export interface UsersApiUsersLoginDeviceFingerprintPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly xSessionID?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly loadProfileData?: string
}

/**
 * Request parameters for usersLoginPost operation in UsersApi.
 * @export
 * @interface UsersApiUsersLoginPostRequest
 */
export interface UsersApiUsersLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginPost
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginPost
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginPost
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginPost
     */
    readonly xSessionID?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginPost
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginPost
     */
    readonly xRecaptchaToken?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginPost
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginPost
     */
    readonly loadProfileData?: string

    /**
     * 
     * @type {UsersLoginPostRequest}
     * @memberof UsersApiUsersLoginPost
     */
    readonly usersLoginPostRequest?: UsersLoginPostRequest
}

/**
 * Request parameters for usersMeGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersMeGetRequest
 */
export interface UsersApiUsersMeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersMeGet
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersMeGet
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersMeGet
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersMeGet
     */
    readonly authorization?: string
}

/**
 * Request parameters for usersRegisterPost operation in UsersApi.
 * @export
 * @interface UsersApiUsersRegisterPostRequest
 */
export interface UsersApiUsersRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersRegisterPost
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersRegisterPost
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {UsersRegisterPostRequest}
     * @memberof UsersApiUsersRegisterPost
     */
    readonly usersRegisterPostRequest?: UsersRegisterPostRequest
}

/**
 * Request parameters for usersRequestCodePost operation in UsersApi.
 * @export
 * @interface UsersApiUsersRequestCodePostRequest
 */
export interface UsersApiUsersRequestCodePostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersRequestCodePost
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersRequestCodePost
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersRequestCodePost
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersRequestCodePost
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersRequestCodePost
     */
    readonly type?: string

    /**
     * 
     * @type {UsersRequestCodePostRequest}
     * @memberof UsersApiUsersRequestCodePost
     */
    readonly usersRequestCodePostRequest?: UsersRequestCodePostRequest
}

/**
 * Request parameters for usersUserIdCardsCardIdDelete operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserIdCardsCardIdDeleteRequest
 */
export interface UsersApiUsersUserIdCardsCardIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdDelete
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdDelete
     */
    readonly cardId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdDelete
     */
    readonly authorization?: string
}

/**
 * Request parameters for usersUserIdCardsCardIdGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserIdCardsCardIdGetRequest
 */
export interface UsersApiUsersUserIdCardsCardIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdGet
     */
    readonly cardId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdGet
     */
    readonly authorization?: string
}

/**
 * Request parameters for usersUserIdCardsGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserIdCardsGetRequest
 */
export interface UsersApiUsersUserIdCardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsGet
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsGet
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsGet
     */
    readonly xMerchantID?: string
}

/**
 * Request parameters for usersUserIdCardsPost operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserIdCardsPostRequest
 */
export interface UsersApiUsersUserIdCardsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsPost
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsPost
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsPost
     */
    readonly xMerchantID?: string

    /**
     * 
     * @type {UsersUserIdCardsPostRequest}
     * @memberof UsersApiUsersUserIdCardsPost
     */
    readonly usersUserIdCardsPostRequest?: UsersUserIdCardsPostRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Get If User Exists
     * @summary Get If User Exists
     * @param {UsersApiUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(requestParameters: UsersApiUsersGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.authorization, requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login User
     * @summary Login User
     * @param {UsersApiUsersLoginDeviceFingerprintPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLoginDeviceFingerprintPost(requestParameters: UsersApiUsersLoginDeviceFingerprintPostRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLoginDeviceFingerprintPost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.xSessionID, requestParameters.authorization, requestParameters.type, requestParameters.loadProfileData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
     * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
     * @param {UsersApiUsersLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLoginPost(requestParameters: UsersApiUsersLoginPostRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLoginPost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.xSessionID, requestParameters.authorization, requestParameters.xRecaptchaToken, requestParameters.type, requestParameters.loadProfileData, requestParameters.usersLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get User Information
     * @summary Get User Information
     * @param {UsersApiUsersMeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMeGet(requestParameters: UsersApiUsersMeGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersMeGet(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a user of your business, this user once registered will belong to the DEUNA Network.
     * @summary Register User
     * @param {UsersApiUsersRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRegisterPost(requestParameters: UsersApiUsersRegisterPostRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRegisterPost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.usersRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
     * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
     * @param {UsersApiUsersRequestCodePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRequestCodePost(requestParameters: UsersApiUsersRequestCodePostRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRequestCodePost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.authorization, requestParameters.type, requestParameters.usersRequestCodePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove card by identifier
     * @summary Remove card by identifier
     * @param {UsersApiUsersUserIdCardsCardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdCardsCardIdDelete(requestParameters: UsersApiUsersUserIdCardsCardIdDeleteRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdCardsCardIdDelete(requestParameters.userId, requestParameters.cardId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain a card by its identifier.
     * @summary Obtain a card by its identifier.
     * @param {UsersApiUsersUserIdCardsCardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdCardsCardIdGet(requestParameters: UsersApiUsersUserIdCardsCardIdGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdCardsCardIdGet(requestParameters.userId, requestParameters.cardId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all user cards
     * @summary Get all user cards
     * @param {UsersApiUsersUserIdCardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdCardsGet(requestParameters: UsersApiUsersUserIdCardsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdCardsGet(requestParameters.userId, requestParameters.authorization, requestParameters.xMerchantID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register user card
     * @summary Register user card
     * @param {UsersApiUsersUserIdCardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdCardsPost(requestParameters: UsersApiUsersUserIdCardsPostRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdCardsPost(requestParameters.userId, requestParameters.authorization, requestParameters.xMerchantID, requestParameters.usersUserIdCardsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


