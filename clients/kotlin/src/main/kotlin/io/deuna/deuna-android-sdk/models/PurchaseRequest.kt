/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.deuna.deuna-android-sdk.models

import io.deuna.deuna-android-sdk.models.PurchaseRequestBillingAddress
import io.deuna.deuna-android-sdk.models.PurchaseRequestCreditCard
import io.deuna.deuna-android-sdk.models.PurchaseRequestShippingAddress
import io.deuna.deuna-android-sdk.models.PurchaseRequestSpecificFields

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param email Email del usuario
 * @param methodType Metodo de pago puede ser tarjeta de crédito, POS o terminal y efectivo
 * @param storeCode Código de la tienda, si solo cuentas con una tienda o sucursal se debe usar \"all\"
 * @param token Token de la orden a procesar
 * @param billingAddress 
 * @param callbackUrl URL de redirección
 * @param cardId Identificador de la tarjeta si se encuentra tokenizada, si este valor existe solo debe enviar el cvv de la tarjeta en el objeto *credit_card*
 * @param cashChange Token de la orden a procesar
 * @param creditCard 
 * @param deviceId Device id for mercadopago fraud credential generated by the cross domain login snippet.
 * @param paymentLink Es el link de pago generado al tokenizar la orden para efectuar el pago
 * @param processorName Nombre del procesador de pago de tarjeta de credito, en caso sea efectivo se debe colocar *cash*, en caso sea POS o terminal se debe colocar *pos*
 * @param saveUserInfo Se utiliza para la creación del usuario
 * @param sessionId Session id for the current
 * @param shippingAddress 
 * @param specificFields 
 * @param userInstructions Instrucciones del usuario
 */


data class PurchaseRequest (

    /* Email del usuario */
    @Json(name = "email")
    var email: kotlin.String,

    /* Metodo de pago puede ser tarjeta de crédito, POS o terminal y efectivo */
    @Json(name = "method_type")
    var methodType: PurchaseRequest.MethodType,

    /* Código de la tienda, si solo cuentas con una tienda o sucursal se debe usar \"all\" */
    @Json(name = "store_code")
    var storeCode: kotlin.String,

    /* Token de la orden a procesar */
    @Json(name = "token")
    var token: kotlin.String,

    @Json(name = "billing_address")
    var billingAddress: PurchaseRequestBillingAddress? = null,

    /* URL de redirección */
    @Json(name = "callback_url")
    var callbackUrl: kotlin.String? = null,

    /* Identificador de la tarjeta si se encuentra tokenizada, si este valor existe solo debe enviar el cvv de la tarjeta en el objeto *credit_card* */
    @Json(name = "card_id")
    var cardId: kotlin.String? = null,

    /* Token de la orden a procesar */
    @Json(name = "cash_change")
    var cashChange: kotlin.String? = null,

    @Json(name = "credit_card")
    var creditCard: PurchaseRequestCreditCard? = null,

    /* Device id for mercadopago fraud credential generated by the cross domain login snippet. */
    @Json(name = "device_id")
    var deviceId: kotlin.String? = null,

    /* Es el link de pago generado al tokenizar la orden para efectuar el pago */
    @Json(name = "payment_link")
    var paymentLink: kotlin.String? = null,

    /* Nombre del procesador de pago de tarjeta de credito, en caso sea efectivo se debe colocar *cash*, en caso sea POS o terminal se debe colocar *pos* */
    @Json(name = "processor_name")
    var processorName: PurchaseRequest.ProcessorName? = null,

    /* Se utiliza para la creación del usuario */
    @Json(name = "save_user_info")
    var saveUserInfo: kotlin.Boolean? = null,

    /* Session id for the current */
    @Json(name = "session_id")
    var sessionId: kotlin.String? = null,

    @Json(name = "shipping_address")
    var shippingAddress: PurchaseRequestShippingAddress? = null,

    @Json(name = "specific_fields")
    var specificFields: PurchaseRequestSpecificFields? = null,

    /* Instrucciones del usuario */
    @Json(name = "user_instructions")
    var userInstructions: kotlin.String? = null

) {

    /**
     * Metodo de pago puede ser tarjeta de crédito, POS o terminal y efectivo
     *
     * Values: cash,pos,creditCard
     */
    @JsonClass(generateAdapter = false)
    enum class MethodType(val value: kotlin.String) {
        @Json(name = "cash") cash("cash"),
        @Json(name = "pos") pos("pos"),
        @Json(name = "credit_card") creditCard("credit_card");
    }
    /**
     * Nombre del procesador de pago de tarjeta de credito, en caso sea efectivo se debe colocar *cash*, en caso sea POS o terminal se debe colocar *pos*
     *
     * Values: cash,pos,kushki,conektaCredit,paymentezCredit
     */
    @JsonClass(generateAdapter = false)
    enum class ProcessorName(val value: kotlin.String) {
        @Json(name = "cash") cash("cash"),
        @Json(name = "pos") pos("pos"),
        @Json(name = "kushki") kushki("kushki"),
        @Json(name = "conekta_credit") conektaCredit("conekta_credit"),
        @Json(name = "paymentez_credit") paymentezCredit("paymentez_credit");
    }
}

