/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.deuna.deuna-android-sdk.models

import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderBillingAddress
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderDiscountsInner
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderGiftCardInner
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderItemsInner
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderMetadata
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderPayment
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderShipping
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderShippingAddress
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderShippingMethod
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderShippingOptions
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderWebhookUrls

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param currency Representa la moneda de uso del comercio en 3 caracteres bajo la ISO 3166-1 alpha-3
 * @param orderId Representa al identificador de la orden dentro del comercio
 * @param storeCode El **store_code** corresponde al código de una tienda, es decir, el comercio podría tener múltiples tiendas (sucursales) para los cuales el **store_code** sirve como identificar de las mismas, en caso de ser un comercio sin tiendas *(sucursales)* el valor por defecto deberá ser ***all***. <br> **Nota:** Este valor es muy importante dado que las configuraciones del Admin serán aplicados según el código de las tiendas o **store_code**
 * @param subTotal Es el monto del subtotal de la compra. Este monto es sin impuestos. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos.
 * @param totalAmount Es el total de la orden esto comprende la suma del total de sub_total y total_tax_amount. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos.
 * @param totalTaxAmount Es el total de los impuestos de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos.
 * @param billingAddress 
 * @param cashChange Cambio solicitado por el cliente
 * @param discounts Son los descuentos aplicados en la orden
 * @param giftCard Configuración de las tarjetas de regalo
 * @param items Detalle de los productos que se encuentran en la orden
 * @param metadata 
 * @param payment 
 * @param redirectUrl URL de redirección cuando se completa la orden
 * @param scheduledAt Fecha de entrega
 * @param shipping 
 * @param shippingAddress 
 * @param shippingMethod 
 * @param shippingMethods Métodos de envío
 * @param shippingOptions 
 * @param status Estado de la orden 
 * @param timezone Representa la zona horario del comercio.
 * @param totalDiscount Es el total de los descuentos de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos.
 * @param userInstructions Son las instrucciones especiales que da el cliente en su compra, este valor se sustituye por el comentario en caso que el cliente lo coloque dentro del *checkout*
 * @param webhookUrls 
 */


data class OrderTokenRequestOrder (

    /* Representa la moneda de uso del comercio en 3 caracteres bajo la ISO 3166-1 alpha-3 */
    @Json(name = "currency")
    var currency: OrderTokenRequestOrder.Currency,

    /* Representa al identificador de la orden dentro del comercio */
    @Json(name = "order_id")
    var orderId: kotlin.String,

    /* El **store_code** corresponde al código de una tienda, es decir, el comercio podría tener múltiples tiendas (sucursales) para los cuales el **store_code** sirve como identificar de las mismas, en caso de ser un comercio sin tiendas *(sucursales)* el valor por defecto deberá ser ***all***. <br> **Nota:** Este valor es muy importante dado que las configuraciones del Admin serán aplicados según el código de las tiendas o **store_code** */
    @Json(name = "store_code")
    var storeCode: kotlin.String,

    /* Es el monto del subtotal de la compra. Este monto es sin impuestos. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    @Json(name = "sub_total")
    var subTotal: java.math.BigDecimal,

    /* Es el total de la orden esto comprende la suma del total de sub_total y total_tax_amount. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    @Json(name = "total_amount")
    var totalAmount: java.math.BigDecimal,

    /* Es el total de los impuestos de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    @Json(name = "total_tax_amount")
    var totalTaxAmount: java.math.BigDecimal,

    @Json(name = "billing_address")
    var billingAddress: OrderTokenRequestOrderBillingAddress? = null,

    /* Cambio solicitado por el cliente */
    @Json(name = "cash_change")
    var cashChange: java.math.BigDecimal? = null,

    /* Son los descuentos aplicados en la orden */
    @Json(name = "discounts")
    var discounts: kotlin.collections.MutableSet<OrderTokenRequestOrderDiscountsInner>? = null,

    /* Configuración de las tarjetas de regalo */
    @Json(name = "gift_card")
    var giftCard: kotlin.collections.MutableList<OrderTokenRequestOrderGiftCardInner>? = null,

    /* Detalle de los productos que se encuentran en la orden */
    @Json(name = "items")
    var items: kotlin.collections.MutableSet<OrderTokenRequestOrderItemsInner>? = null,

    @Json(name = "metadata")
    var metadata: OrderTokenRequestOrderMetadata? = null,

    @Json(name = "payment")
    var payment: OrderTokenRequestOrderPayment? = null,

    /* URL de redirección cuando se completa la orden */
    @Json(name = "redirect_url")
    var redirectUrl: kotlin.String? = null,

    /* Fecha de entrega */
    @Json(name = "scheduled_at")
    var scheduledAt: kotlin.String? = null,

    @Json(name = "shipping")
    var shipping: OrderTokenRequestOrderShipping? = null,

    @Json(name = "shipping_address")
    var shippingAddress: OrderTokenRequestOrderShippingAddress? = null,

    @Json(name = "shipping_method")
    var shippingMethod: OrderTokenRequestOrderShippingMethod? = null,

    /* Métodos de envío */
    @Json(name = "shipping_methods")
    var shippingMethods: kotlin.collections.MutableList<kotlin.Any>? = null,

    @Json(name = "shipping_options")
    var shippingOptions: OrderTokenRequestOrderShippingOptions? = null,

    /* Estado de la orden  */
    @Json(name = "status")
    var status: OrderTokenRequestOrder.Status? = null,

    /* Representa la zona horario del comercio. */
    @Json(name = "timezone")
    var timezone: OrderTokenRequestOrder.Timezone? = null,

    /* Es el total de los descuentos de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    @Json(name = "total_discount")
    var totalDiscount: java.math.BigDecimal? = null,

    /* Son las instrucciones especiales que da el cliente en su compra, este valor se sustituye por el comentario en caso que el cliente lo coloque dentro del *checkout* */
    @Json(name = "user_instructions")
    var userInstructions: kotlin.String? = null,

    @Json(name = "webhook_urls")
    var webhookUrls: OrderTokenRequestOrderWebhookUrls? = null

) {

    /**
     * Representa la moneda de uso del comercio en 3 caracteres bajo la ISO 3166-1 alpha-3
     *
     * Values: uSD,mXN,cOP,cLP,bRL,aRS,pEN
     */
    @JsonClass(generateAdapter = false)
    enum class Currency(val value: kotlin.String) {
        @Json(name = "USD") uSD("USD"),
        @Json(name = "MXN") mXN("MXN"),
        @Json(name = "COP") cOP("COP"),
        @Json(name = "CLP") cLP("CLP"),
        @Json(name = "BRL") bRL("BRL"),
        @Json(name = "ARS") aRS("ARS"),
        @Json(name = "PEN") pEN("PEN");
    }
    /**
     * Estado de la orden 
     *
     * Values: pending,succeeded,cancelled,refund
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "pending") pending("pending"),
        @Json(name = "succeeded") succeeded("succeeded"),
        @Json(name = "cancelled") cancelled("cancelled"),
        @Json(name = "refund") refund("refund");
    }
    /**
     * Representa la zona horario del comercio.
     *
     * Values: americaSlashMexicoCity
     */
    @JsonClass(generateAdapter = false)
    enum class Timezone(val value: kotlin.String) {
        @Json(name = "America/Mexico_City") americaSlashMexicoCity("America/Mexico_City");
    }
}

