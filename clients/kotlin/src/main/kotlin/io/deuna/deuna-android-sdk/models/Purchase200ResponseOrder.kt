/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.deuna.deuna-android-sdk.models

import io.deuna.deuna-android-sdk.models.OrderToken200ResponseOrderMetadata
import io.deuna.deuna-android-sdk.models.OrderTokenRequestOrderShippingAddress
import io.deuna.deuna-android-sdk.models.Purchase200ResponseOrderItemsInner
import io.deuna.deuna-android-sdk.models.Purchase200ResponseOrderPayment
import io.deuna.deuna-android-sdk.models.PurchaseRequestBillingAddress

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param billingAddress 
 * @param cashChange Cambio solicitado por el cliente
 * @param currency Representa la moneda de uso del comercio en 3 caracteres bajo la ISO 3166-1 alpha-3
 * @param discounts Son los descuentos aplicados en la orden
 * @param displayItemsTotalAmount Es el costo total de todos los items de la orden que se mostrara en el checkout
 * @param displayShippingAmount Es el costo total del envío de la orden que se mostrara en el checkout.
 * @param displaySubTotal Es el subtotal de la compra, que comprende la suma de items_total_amount y shipping_amount que se mostrara en el checkout.
 * @param displayTaxAmount Es el monto total de los **impuestos** aplicados en la orden que aparece en el checkout.
 * @param displayTotalAmount Es el total de la orden esto comprende la suma del total de *items_total_amount*, *shipping_amount* y *tax_amount* que se mostrara en el checkout.
 * @param displayTotalDiscount Monto de descuento total de la orden que se mostrara en el checkout
 * @param giftCard tarjeta de regalo
 * @param items Detalle de los productos que se encuentran en la orden
 * @param itemsTotalAmount Es el costo total de todos los items de la orden.
 * @param metadata 
 * @param orderId Representa al identificador de la orden dentro del comercio
 * @param payment 
 * @param paymentLink Es el link de pago generado al tokenizar la orden para efectuar el pago
 * @param redirectUrl Url donde se redireccionara al terminar la compra
 * @param scheduledAt Fecha de entrega
 * @param shippingAddress 
 * @param shippingAmount Es el costo total del envío de la orden.
 * @param shippingMethods Métodos de envío
 * @param shippingOptions Son los métodos de envío disponibles de la orden, actualmente tenemos delivery, pickup y dinein
 * @param status Estado de la orden 
 * @param storeCode Es el código de la tienda, por defecto el código de la tienda es all
 * @param subTotal Es el subtotal de la compra, que comprende la suma de items_total_amount y shipping_amount.
 * @param taxAmount Es el monto total de los **impuestos** aplicados en la orden.
 * @param timezone Representa la zona horario de tu comercio
 * @param totalAmount Es el total de la orden esto comprende la suma del total de *items_total_amount*, *shipping_amount* y *tax_amount*.
 * @param totalDiscount Monto de descuento total de la orden
 * @param userInstructions Son las instrucciones especiales que da el cliente en su compra, este valor se sustituye por el comentario en caso que el cliente lo coloque dentro del *checkout*
 */


data class Purchase200ResponseOrder (

    @Json(name = "billing_address")
    var billingAddress: PurchaseRequestBillingAddress? = null,

    /* Cambio solicitado por el cliente */
    @Json(name = "cash_change")
    var cashChange: java.math.BigDecimal? = null,

    /* Representa la moneda de uso del comercio en 3 caracteres bajo la ISO 3166-1 alpha-3 */
    @Json(name = "currency")
    var currency: kotlin.String? = null,

    /* Son los descuentos aplicados en la orden */
    @Json(name = "discounts")
    var discounts: kotlin.collections.MutableSet<kotlin.Any>? = null,

    /* Es el costo total de todos los items de la orden que se mostrara en el checkout */
    @Json(name = "display_items_total_amount")
    var displayItemsTotalAmount: kotlin.String? = null,

    /* Es el costo total del envío de la orden que se mostrara en el checkout. */
    @Json(name = "display_shipping_amount")
    var displayShippingAmount: kotlin.String? = null,

    /* Es el subtotal de la compra, que comprende la suma de items_total_amount y shipping_amount que se mostrara en el checkout. */
    @Json(name = "display_sub_total")
    var displaySubTotal: kotlin.String? = null,

    /* Es el monto total de los **impuestos** aplicados en la orden que aparece en el checkout. */
    @Json(name = "display_tax_amount")
    var displayTaxAmount: kotlin.String? = null,

    /* Es el total de la orden esto comprende la suma del total de *items_total_amount*, *shipping_amount* y *tax_amount* que se mostrara en el checkout. */
    @Json(name = "display_total_amount")
    var displayTotalAmount: kotlin.String? = null,

    /* Monto de descuento total de la orden que se mostrara en el checkout */
    @Json(name = "display_total_discount")
    var displayTotalDiscount: kotlin.String? = null,

    /* tarjeta de regalo */
    @Json(name = "gift_card")
    var giftCard: kotlin.collections.MutableList<kotlin.Any>? = null,

    /* Detalle de los productos que se encuentran en la orden */
    @Json(name = "items")
    var items: kotlin.collections.MutableList<Purchase200ResponseOrderItemsInner>? = null,

    /* Es el costo total de todos los items de la orden. */
    @Json(name = "items_total_amount")
    var itemsTotalAmount: java.math.BigDecimal? = null,

    @Json(name = "metadata")
    var metadata: OrderToken200ResponseOrderMetadata? = null,

    /* Representa al identificador de la orden dentro del comercio */
    @Json(name = "order_id")
    var orderId: kotlin.String? = null,

    @Json(name = "payment")
    var payment: Purchase200ResponseOrderPayment? = null,

    /* Es el link de pago generado al tokenizar la orden para efectuar el pago */
    @Json(name = "payment_link")
    var paymentLink: kotlin.String? = null,

    /* Url donde se redireccionara al terminar la compra */
    @Json(name = "redirect_url")
    var redirectUrl: kotlin.String? = null,

    /* Fecha de entrega */
    @Json(name = "scheduled_at")
    var scheduledAt: kotlin.String? = null,

    @Json(name = "shipping_address")
    var shippingAddress: OrderTokenRequestOrderShippingAddress? = null,

    /* Es el costo total del envío de la orden. */
    @Json(name = "shipping_amount")
    var shippingAmount: java.math.BigDecimal? = null,

    /* Métodos de envío */
    @Json(name = "shipping_methods")
    var shippingMethods: kotlin.collections.MutableList<kotlin.Any>? = null,

    /* Son los métodos de envío disponibles de la orden, actualmente tenemos delivery, pickup y dinein */
    @Json(name = "shipping_options")
    var shippingOptions: kotlin.Any? = null,

    /* Estado de la orden  */
    @Json(name = "status")
    var status: Purchase200ResponseOrder.Status? = null,

    /* Es el código de la tienda, por defecto el código de la tienda es all */
    @Json(name = "store_code")
    var storeCode: kotlin.String? = null,

    /* Es el subtotal de la compra, que comprende la suma de items_total_amount y shipping_amount. */
    @Json(name = "sub_total")
    var subTotal: java.math.BigDecimal? = null,

    /* Es el monto total de los **impuestos** aplicados en la orden. */
    @Json(name = "tax_amount")
    var taxAmount: java.math.BigDecimal? = null,

    /* Representa la zona horario de tu comercio */
    @Json(name = "timezone")
    var timezone: kotlin.String? = null,

    /* Es el total de la orden esto comprende la suma del total de *items_total_amount*, *shipping_amount* y *tax_amount*. */
    @Json(name = "total_amount")
    var totalAmount: java.math.BigDecimal? = null,

    /* Monto de descuento total de la orden */
    @Json(name = "total_discount")
    var totalDiscount: java.math.BigDecimal? = null,

    /* Son las instrucciones especiales que da el cliente en su compra, este valor se sustituye por el comentario en caso que el cliente lo coloque dentro del *checkout* */
    @Json(name = "user_instructions")
    var userInstructions: kotlin.String? = null

) {

    /**
     * Estado de la orden 
     *
     * Values: pending,succeeded,cancelled,refund,processed,authorized
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "pending") pending("pending"),
        @Json(name = "succeeded") succeeded("succeeded"),
        @Json(name = "cancelled") cancelled("cancelled"),
        @Json(name = "refund") refund("refund"),
        @Json(name = "processed") processed("processed"),
        @Json(name = "authorized") authorized("authorized");
    }
}

