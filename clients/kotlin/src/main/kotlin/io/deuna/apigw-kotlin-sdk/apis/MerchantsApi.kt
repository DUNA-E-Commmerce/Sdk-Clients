/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.deuna.apigw-kotlin-sdk.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.deuna.apigw-kotlin-sdk.models.Purchase200Response
import io.deuna.apigw-kotlin-sdk.models.PurchaseRequest

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import io.deuna.apigw-kotlin-sdk.infrastructure.ApiClient
import io.deuna.apigw-kotlin-sdk.infrastructure.ApiResponse
import io.deuna.apigw-kotlin-sdk.infrastructure.ClientException
import io.deuna.apigw-kotlin-sdk.infrastructure.ClientError
import io.deuna.apigw-kotlin-sdk.infrastructure.ServerException
import io.deuna.apigw-kotlin-sdk.infrastructure.ServerError
import io.deuna.apigw-kotlin-sdk.infrastructure.MultiValueMap
import io.deuna.apigw-kotlin-sdk.infrastructure.PartConfig
import io.deuna.apigw-kotlin-sdk.infrastructure.RequestConfig
import io.deuna.apigw-kotlin-sdk.infrastructure.RequestMethod
import io.deuna.apigw-kotlin-sdk.infrastructure.ResponseType
import io.deuna.apigw-kotlin-sdk.infrastructure.Success
import io.deuna.apigw-kotlin-sdk.infrastructure.toMultiValue

class MerchantsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://staging-apigw.getduna.com:443")
        }
    }

    /**
     * Make the payment of the order.
     * Make the payment of the order.
     * @param authorization  (optional)
     * @param xApiKey  (optional)
     * @param xMerchantID  (optional)
     * @param xStoreCode  (optional)
     * @param xDeviceId  (optional)
     * @param xSessionId  (optional)
     * @param userAgent  (optional)
     * @param purchaseRequest  (optional)
     * @return Purchase200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun purchase(authorization: kotlin.String? = null, xApiKey: kotlin.String? = null, xMerchantID: kotlin.String? = null, xStoreCode: kotlin.String? = null, xDeviceId: kotlin.String? = null, xSessionId: kotlin.String? = null, userAgent: kotlin.String? = null, purchaseRequest: PurchaseRequest? = null) : Purchase200Response = withContext(Dispatchers.IO) {
        val localVarResponse = purchaseWithHttpInfo(authorization = authorization, xApiKey = xApiKey, xMerchantID = xMerchantID, xStoreCode = xStoreCode, xDeviceId = xDeviceId, xSessionId = xSessionId, userAgent = userAgent, purchaseRequest = purchaseRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Purchase200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Make the payment of the order.
     * Make the payment of the order.
     * @param authorization  (optional)
     * @param xApiKey  (optional)
     * @param xMerchantID  (optional)
     * @param xStoreCode  (optional)
     * @param xDeviceId  (optional)
     * @param xSessionId  (optional)
     * @param userAgent  (optional)
     * @param purchaseRequest  (optional)
     * @return ApiResponse<Purchase200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun purchaseWithHttpInfo(authorization: kotlin.String?, xApiKey: kotlin.String?, xMerchantID: kotlin.String?, xStoreCode: kotlin.String?, xDeviceId: kotlin.String?, xSessionId: kotlin.String?, userAgent: kotlin.String?, purchaseRequest: PurchaseRequest?) : ApiResponse<Purchase200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = purchaseRequestConfig(authorization = authorization, xApiKey = xApiKey, xMerchantID = xMerchantID, xStoreCode = xStoreCode, xDeviceId = xDeviceId, xSessionId = xSessionId, userAgent = userAgent, purchaseRequest = purchaseRequest)

        return@withContext request<PurchaseRequest, Purchase200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation purchase
     *
     * @param authorization  (optional)
     * @param xApiKey  (optional)
     * @param xMerchantID  (optional)
     * @param xStoreCode  (optional)
     * @param xDeviceId  (optional)
     * @param xSessionId  (optional)
     * @param userAgent  (optional)
     * @param purchaseRequest  (optional)
     * @return RequestConfig
     */
    fun purchaseRequestConfig(authorization: kotlin.String?, xApiKey: kotlin.String?, xMerchantID: kotlin.String?, xStoreCode: kotlin.String?, xDeviceId: kotlin.String?, xSessionId: kotlin.String?, userAgent: kotlin.String?, purchaseRequest: PurchaseRequest?) : RequestConfig<PurchaseRequest> {
        val localVariableBody = purchaseRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        xApiKey?.apply { localVariableHeaders["X-Api-Key"] = this.toString() }
        xMerchantID?.apply { localVariableHeaders["X-Merchant-ID"] = this.toString() }
        xStoreCode?.apply { localVariableHeaders["X-Store-Code"] = this.toString() }
        xDeviceId?.apply { localVariableHeaders["X-Device-Id"] = this.toString() }
        xSessionId?.apply { localVariableHeaders["X-Session-Id"] = this.toString() }
        userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/merchants/transactions/purchase",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
