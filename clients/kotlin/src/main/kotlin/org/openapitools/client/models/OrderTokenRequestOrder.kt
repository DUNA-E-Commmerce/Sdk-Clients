/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.OrderTokenRequestOrderBillingAddress
import org.openapitools.client.models.OrderTokenRequestOrderDiscountsInner
import org.openapitools.client.models.OrderTokenRequestOrderGiftCardInner
import org.openapitools.client.models.OrderTokenRequestOrderItemsInner
import org.openapitools.client.models.OrderTokenRequestOrderMetadata
import org.openapitools.client.models.OrderTokenRequestOrderPayment
import org.openapitools.client.models.OrderTokenRequestOrderShipping
import org.openapitools.client.models.OrderTokenRequestOrderShippingAddress
import org.openapitools.client.models.OrderTokenRequestOrderShippingMethod
import org.openapitools.client.models.OrderTokenRequestOrderShippingOptions
import org.openapitools.client.models.OrderTokenRequestOrderWebhookUrls

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param currency Representa la moneda de uso del comercio en 3 caracteres bajo la ISO 3166-1 alpha-3
 * @param orderId Representa al identificador de la orden dentro del comercio
 * @param storeCode El **store_code** corresponde al código de una tienda, es decir, el comercio podría tener múltiples tiendas (sucursales) para los cuales el **store_code** sirve como identificar de las mismas, en caso de ser un comercio sin tiendas *(sucursales)* el valor por defecto deberá ser ***all***. <br> **Nota:** Este valor es muy importante dado que las configuraciones del Admin serán aplicados según el código de las tiendas o **store_code**
 * @param subTotal Es el monto del subtotal de la compra. Este monto es sin impuestos. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos.
 * @param totalAmount Es el total de la orden esto comprende la suma del total de sub_total y total_tax_amount. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos.
 * @param totalTaxAmount Es el total de los impuestos de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos.
 * @param billingAddress 
 * @param cashChange Cambio solicitado por el cliente
 * @param discounts Son los descuentos aplicados en la orden
 * @param giftCard Configuración de las tarjetas de regalo
 * @param items Detalle de los productos que se encuentran en la orden
 * @param metadata 
 * @param payment 
 * @param redirectUrl URL de redirección cuando se completa la orden
 * @param scheduledAt Fecha de entrega
 * @param shipping 
 * @param shippingAddress 
 * @param shippingMethod 
 * @param shippingMethods Métodos de envío
 * @param shippingOptions 
 * @param status Estado de la orden 
 * @param timezone Representa la zona horario del comercio.
 * @param totalDiscount Es el total de los descuentos de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos.
 * @param userInstructions Son las instrucciones especiales que da el cliente en su compra, este valor se sustituye por el comentario en caso que el cliente lo coloque dentro del *checkout*
 * @param webhookUrls 
 */


data class OrderTokenRequestOrder (

    /* Representa la moneda de uso del comercio en 3 caracteres bajo la ISO 3166-1 alpha-3 */
    @Json(name = "currency")
    val currency: OrderTokenRequestOrder.Currency,

    /* Representa al identificador de la orden dentro del comercio */
    @Json(name = "order_id")
    val orderId: kotlin.String,

    /* El **store_code** corresponde al código de una tienda, es decir, el comercio podría tener múltiples tiendas (sucursales) para los cuales el **store_code** sirve como identificar de las mismas, en caso de ser un comercio sin tiendas *(sucursales)* el valor por defecto deberá ser ***all***. <br> **Nota:** Este valor es muy importante dado que las configuraciones del Admin serán aplicados según el código de las tiendas o **store_code** */
    @Json(name = "store_code")
    val storeCode: kotlin.String,

    /* Es el monto del subtotal de la compra. Este monto es sin impuestos. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    @Json(name = "sub_total")
    val subTotal: java.math.BigDecimal,

    /* Es el total de la orden esto comprende la suma del total de sub_total y total_tax_amount. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    @Json(name = "total_amount")
    val totalAmount: java.math.BigDecimal,

    /* Es el total de los impuestos de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    @Json(name = "total_tax_amount")
    val totalTaxAmount: java.math.BigDecimal,

    @Json(name = "billing_address")
    val billingAddress: OrderTokenRequestOrderBillingAddress? = null,

    /* Cambio solicitado por el cliente */
    @Json(name = "cash_change")
    val cashChange: java.math.BigDecimal? = null,

    /* Son los descuentos aplicados en la orden */
    @Json(name = "discounts")
    val discounts: kotlin.collections.Set<OrderTokenRequestOrderDiscountsInner>? = null,

    /* Configuración de las tarjetas de regalo */
    @Json(name = "gift_card")
    val giftCard: kotlin.collections.List<OrderTokenRequestOrderGiftCardInner>? = null,

    /* Detalle de los productos que se encuentran en la orden */
    @Json(name = "items")
    val items: kotlin.collections.Set<OrderTokenRequestOrderItemsInner>? = null,

    @Json(name = "metadata")
    val metadata: OrderTokenRequestOrderMetadata? = null,

    @Json(name = "payment")
    val payment: OrderTokenRequestOrderPayment? = null,

    /* URL de redirección cuando se completa la orden */
    @Json(name = "redirect_url")
    val redirectUrl: kotlin.String? = null,

    /* Fecha de entrega */
    @Json(name = "scheduled_at")
    val scheduledAt: kotlin.String? = null,

    @Json(name = "shipping")
    val shipping: OrderTokenRequestOrderShipping? = null,

    @Json(name = "shipping_address")
    val shippingAddress: OrderTokenRequestOrderShippingAddress? = null,

    @Json(name = "shipping_method")
    val shippingMethod: OrderTokenRequestOrderShippingMethod? = null,

    /* Métodos de envío */
    @Json(name = "shipping_methods")
    val shippingMethods: kotlin.collections.List<kotlin.Any>? = null,

    @Json(name = "shipping_options")
    val shippingOptions: OrderTokenRequestOrderShippingOptions? = null,

    /* Estado de la orden  */
    @Json(name = "status")
    val status: OrderTokenRequestOrder.Status? = null,

    /* Representa la zona horario del comercio. */
    @Json(name = "timezone")
    val timezone: OrderTokenRequestOrder.Timezone? = null,

    /* Es el total de los descuentos de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    @Json(name = "total_discount")
    val totalDiscount: java.math.BigDecimal? = null,

    /* Son las instrucciones especiales que da el cliente en su compra, este valor se sustituye por el comentario en caso que el cliente lo coloque dentro del *checkout* */
    @Json(name = "user_instructions")
    val userInstructions: kotlin.String? = null,

    @Json(name = "webhook_urls")
    val webhookUrls: OrderTokenRequestOrderWebhookUrls? = null

) {

    /**
     * Representa la moneda de uso del comercio en 3 caracteres bajo la ISO 3166-1 alpha-3
     *
     * Values: USD,MXN,COP,CLP,BRL,ARS,PEN
     */
    @JsonClass(generateAdapter = false)
    enum class Currency(val value: kotlin.String) {
        @Json(name = "USD") USD("USD"),
        @Json(name = "MXN") MXN("MXN"),
        @Json(name = "COP") COP("COP"),
        @Json(name = "CLP") CLP("CLP"),
        @Json(name = "BRL") BRL("BRL"),
        @Json(name = "ARS") ARS("ARS"),
        @Json(name = "PEN") PEN("PEN");
    }
    /**
     * Estado de la orden 
     *
     * Values: PENDING,SUCCEEDED,CANCELLED,REFUND
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "pending") PENDING("pending"),
        @Json(name = "succeeded") SUCCEEDED("succeeded"),
        @Json(name = "cancelled") CANCELLED("cancelled"),
        @Json(name = "refund") REFUND("refund");
    }
    /**
     * Representa la zona horario del comercio.
     *
     * Values: AMERICA_SLASH_MEXICO_CITY
     */
    @JsonClass(generateAdapter = false)
    enum class Timezone(val value: kotlin.String) {
        @Json(name = "America/Mexico_City") AMERICA_SLASH_MEXICO_CITY("America/Mexico_City");
    }
}

