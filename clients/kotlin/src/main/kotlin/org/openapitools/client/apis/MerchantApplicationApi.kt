/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.MerchantsApplicationsValidateGet200Response
import org.openapitools.client.models.MerchantsMerchantIdApplicationsGet200Response
import org.openapitools.client.models.MerchantsMerchantIdApplicationsPost200Response
import org.openapitools.client.models.MerchantsMerchantIdApplicationsPostRequest

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class MerchantApplicationApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://staging-apigw.getduna.com:443")
        }
    }

    /**
     * Get Application
     * Get application by ID
     * @param merchantId 
     * @param applicationId 
     * @param authorization  (optional)
     * @return MerchantsMerchantIdApplicationsPost200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getApplicationById(merchantId: kotlin.String, applicationId: kotlin.String, authorization: kotlin.String? = null) : MerchantsMerchantIdApplicationsPost200Response = withContext(Dispatchers.IO) {
        val localVarResponse = getApplicationByIdWithHttpInfo(merchantId = merchantId, applicationId = applicationId, authorization = authorization)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MerchantsMerchantIdApplicationsPost200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Application
     * Get application by ID
     * @param merchantId 
     * @param applicationId 
     * @param authorization  (optional)
     * @return ApiResponse<MerchantsMerchantIdApplicationsPost200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getApplicationByIdWithHttpInfo(merchantId: kotlin.String?, applicationId: kotlin.String?, authorization: kotlin.String?) : ApiResponse<MerchantsMerchantIdApplicationsPost200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getApplicationByIdRequestConfig(merchantId = merchantId, applicationId = applicationId, authorization = authorization)

        return@withContext request<Unit, MerchantsMerchantIdApplicationsPost200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getApplicationById
     *
     * @param merchantId 
     * @param applicationId 
     * @param authorization  (optional)
     * @return RequestConfig
     */
    fun getApplicationByIdRequestConfig(merchantId: kotlin.String?, applicationId: kotlin.String?, authorization: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/merchants/{merchant_id}/applications/{application_id}".replace("{"+"merchant_id"+"}", encodeURIComponent(merchantId.toString())).replace("{"+"application_id"+"}", encodeURIComponent(applicationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Validate Application
     * Validate application
     * @param xApiKey  (optional)
     * @return MerchantsApplicationsValidateGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun merchantsApplicationsValidateGet(xApiKey: kotlin.String? = null) : MerchantsApplicationsValidateGet200Response = withContext(Dispatchers.IO) {
        val localVarResponse = merchantsApplicationsValidateGetWithHttpInfo(xApiKey = xApiKey)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MerchantsApplicationsValidateGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Validate Application
     * Validate application
     * @param xApiKey  (optional)
     * @return ApiResponse<MerchantsApplicationsValidateGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun merchantsApplicationsValidateGetWithHttpInfo(xApiKey: kotlin.String?) : ApiResponse<MerchantsApplicationsValidateGet200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = merchantsApplicationsValidateGetRequestConfig(xApiKey = xApiKey)

        return@withContext request<Unit, MerchantsApplicationsValidateGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation merchantsApplicationsValidateGet
     *
     * @param xApiKey  (optional)
     * @return RequestConfig
     */
    fun merchantsApplicationsValidateGetRequestConfig(xApiKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xApiKey?.apply { localVariableHeaders["X-Api-Key"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/merchants/applications/validate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Applications
     * Get applications of merchant
     * @param merchantId 
     * @param authorization  (optional)
     * @return MerchantsMerchantIdApplicationsGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun merchantsMerchantIdApplicationsGet(merchantId: kotlin.String, authorization: kotlin.String? = null) : MerchantsMerchantIdApplicationsGet200Response = withContext(Dispatchers.IO) {
        val localVarResponse = merchantsMerchantIdApplicationsGetWithHttpInfo(merchantId = merchantId, authorization = authorization)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MerchantsMerchantIdApplicationsGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Applications
     * Get applications of merchant
     * @param merchantId 
     * @param authorization  (optional)
     * @return ApiResponse<MerchantsMerchantIdApplicationsGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun merchantsMerchantIdApplicationsGetWithHttpInfo(merchantId: kotlin.String?, authorization: kotlin.String?) : ApiResponse<MerchantsMerchantIdApplicationsGet200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = merchantsMerchantIdApplicationsGetRequestConfig(merchantId = merchantId, authorization = authorization)

        return@withContext request<Unit, MerchantsMerchantIdApplicationsGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation merchantsMerchantIdApplicationsGet
     *
     * @param merchantId 
     * @param authorization  (optional)
     * @return RequestConfig
     */
    fun merchantsMerchantIdApplicationsGetRequestConfig(merchantId: kotlin.String?, authorization: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/merchants/{merchant_id}/applications".replace("{"+"merchant_id"+"}", encodeURIComponent(merchantId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Application
     * Create application
     * @param merchantId 
     * @param authorization  (optional)
     * @param merchantsMerchantIdApplicationsPostRequest  (optional)
     * @return MerchantsMerchantIdApplicationsPost200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun merchantsMerchantIdApplicationsPost(merchantId: kotlin.String, authorization: kotlin.String? = null, merchantsMerchantIdApplicationsPostRequest: MerchantsMerchantIdApplicationsPostRequest? = null) : MerchantsMerchantIdApplicationsPost200Response = withContext(Dispatchers.IO) {
        val localVarResponse = merchantsMerchantIdApplicationsPostWithHttpInfo(merchantId = merchantId, authorization = authorization, merchantsMerchantIdApplicationsPostRequest = merchantsMerchantIdApplicationsPostRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MerchantsMerchantIdApplicationsPost200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Application
     * Create application
     * @param merchantId 
     * @param authorization  (optional)
     * @param merchantsMerchantIdApplicationsPostRequest  (optional)
     * @return ApiResponse<MerchantsMerchantIdApplicationsPost200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun merchantsMerchantIdApplicationsPostWithHttpInfo(merchantId: kotlin.String?, authorization: kotlin.String?, merchantsMerchantIdApplicationsPostRequest: MerchantsMerchantIdApplicationsPostRequest?) : ApiResponse<MerchantsMerchantIdApplicationsPost200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = merchantsMerchantIdApplicationsPostRequestConfig(merchantId = merchantId, authorization = authorization, merchantsMerchantIdApplicationsPostRequest = merchantsMerchantIdApplicationsPostRequest)

        return@withContext request<MerchantsMerchantIdApplicationsPostRequest, MerchantsMerchantIdApplicationsPost200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation merchantsMerchantIdApplicationsPost
     *
     * @param merchantId 
     * @param authorization  (optional)
     * @param merchantsMerchantIdApplicationsPostRequest  (optional)
     * @return RequestConfig
     */
    fun merchantsMerchantIdApplicationsPostRequestConfig(merchantId: kotlin.String?, authorization: kotlin.String?, merchantsMerchantIdApplicationsPostRequest: MerchantsMerchantIdApplicationsPostRequest?) : RequestConfig<MerchantsMerchantIdApplicationsPostRequest> {
        val localVariableBody = merchantsMerchantIdApplicationsPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/merchants/{merchant_id}/applications".replace("{"+"merchant_id"+"}", encodeURIComponent(merchantId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments()[0]
}
