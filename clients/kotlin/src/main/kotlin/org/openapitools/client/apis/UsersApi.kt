/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.UsersLoginDeviceFingerprintPost200Response
import org.openapitools.client.models.UsersMeGet200Response

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class UsersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://staging-apigw.getduna.com:443")
        }
    }

    /**
     * Login User
     * Login User
     * @param xApiKey  (optional)
     * @param xMerchantId  (optional)
     * @param xDeviceId  (optional)
     * @param xSessionID  (optional)
     * @param authorization  (optional)
     * @param type  (optional)
     * @param loadProfileData  (optional)
     * @return UsersLoginDeviceFingerprintPost200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersLoginDeviceFingerprintPost(xApiKey: kotlin.String? = null, xMerchantId: kotlin.String? = null, xDeviceId: kotlin.String? = null, xSessionID: kotlin.String? = null, authorization: kotlin.String? = null, type: kotlin.String? = null, loadProfileData: kotlin.String? = null) : UsersLoginDeviceFingerprintPost200Response = withContext(Dispatchers.IO) {
        val localVarResponse = usersLoginDeviceFingerprintPostWithHttpInfo(xApiKey = xApiKey, xMerchantId = xMerchantId, xDeviceId = xDeviceId, xSessionID = xSessionID, authorization = authorization, type = type, loadProfileData = loadProfileData)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersLoginDeviceFingerprintPost200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Login User
     * Login User
     * @param xApiKey  (optional)
     * @param xMerchantId  (optional)
     * @param xDeviceId  (optional)
     * @param xSessionID  (optional)
     * @param authorization  (optional)
     * @param type  (optional)
     * @param loadProfileData  (optional)
     * @return ApiResponse<UsersLoginDeviceFingerprintPost200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersLoginDeviceFingerprintPostWithHttpInfo(xApiKey: kotlin.String?, xMerchantId: kotlin.String?, xDeviceId: kotlin.String?, xSessionID: kotlin.String?, authorization: kotlin.String?, type: kotlin.String?, loadProfileData: kotlin.String?) : ApiResponse<UsersLoginDeviceFingerprintPost200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersLoginDeviceFingerprintPostRequestConfig(xApiKey = xApiKey, xMerchantId = xMerchantId, xDeviceId = xDeviceId, xSessionID = xSessionID, authorization = authorization, type = type, loadProfileData = loadProfileData)

        return@withContext request<Unit, UsersLoginDeviceFingerprintPost200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersLoginDeviceFingerprintPost
     *
     * @param xApiKey  (optional)
     * @param xMerchantId  (optional)
     * @param xDeviceId  (optional)
     * @param xSessionID  (optional)
     * @param authorization  (optional)
     * @param type  (optional)
     * @param loadProfileData  (optional)
     * @return RequestConfig
     */
    fun usersLoginDeviceFingerprintPostRequestConfig(xApiKey: kotlin.String?, xMerchantId: kotlin.String?, xDeviceId: kotlin.String?, xSessionID: kotlin.String?, authorization: kotlin.String?, type: kotlin.String?, loadProfileData: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (loadProfileData != null) {
                    put("load_profile_data", listOf(loadProfileData.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xApiKey?.apply { localVariableHeaders["X-Api-Key"] = this.toString() }
        xMerchantId?.apply { localVariableHeaders["X-Merchant-Id"] = this.toString() }
        xDeviceId?.apply { localVariableHeaders["X-Device-Id"] = this.toString() }
        xSessionID?.apply { localVariableHeaders["X-Session-ID"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users/login/device-fingerprint",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get User Information
     * Get User Information
     * @param xApiKey  (optional)
     * @param xMerchantId  (optional)
     * @param xDeviceId  (optional)
     * @param authorization  (optional)
     * @return UsersMeGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersMeGet(xApiKey: kotlin.String? = null, xMerchantId: kotlin.String? = null, xDeviceId: kotlin.String? = null, authorization: kotlin.String? = null) : UsersMeGet200Response = withContext(Dispatchers.IO) {
        val localVarResponse = usersMeGetWithHttpInfo(xApiKey = xApiKey, xMerchantId = xMerchantId, xDeviceId = xDeviceId, authorization = authorization)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersMeGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get User Information
     * Get User Information
     * @param xApiKey  (optional)
     * @param xMerchantId  (optional)
     * @param xDeviceId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse<UsersMeGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersMeGetWithHttpInfo(xApiKey: kotlin.String?, xMerchantId: kotlin.String?, xDeviceId: kotlin.String?, authorization: kotlin.String?) : ApiResponse<UsersMeGet200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersMeGetRequestConfig(xApiKey = xApiKey, xMerchantId = xMerchantId, xDeviceId = xDeviceId, authorization = authorization)

        return@withContext request<Unit, UsersMeGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersMeGet
     *
     * @param xApiKey  (optional)
     * @param xMerchantId  (optional)
     * @param xDeviceId  (optional)
     * @param authorization  (optional)
     * @return RequestConfig
     */
    fun usersMeGetRequestConfig(xApiKey: kotlin.String?, xMerchantId: kotlin.String?, xDeviceId: kotlin.String?, authorization: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xApiKey?.apply { localVariableHeaders["X-Api-Key"] = this.toString() }
        xMerchantId?.apply { localVariableHeaders["X-Merchant-Id"] = this.toString() }
        xDeviceId?.apply { localVariableHeaders["X-Device-Id"] = this.toString() }
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
