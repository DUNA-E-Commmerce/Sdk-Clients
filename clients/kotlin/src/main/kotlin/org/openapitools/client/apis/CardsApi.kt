/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CardsBinBinGet200Response
import org.openapitools.client.models.CardsBinBinGet400Response
import org.openapitools.client.models.GetMerchantsPaymentsMethods401Response
import org.openapitools.client.models.GetUserCards200Response
import org.openapitools.client.models.GetUserCards401Response
import org.openapitools.client.models.GetUserIdCards200Response
import org.openapitools.client.models.GetUserIdCards404Response
import org.openapitools.client.models.PostUsersUserIdCards201Response
import org.openapitools.client.models.PostUsersUserIdCards400Response
import org.openapitools.client.models.PostUsersUserIdCards409Response
import org.openapitools.client.models.PostUsersUserIdCards422Response
import org.openapitools.client.models.PostUsersUserIdCardsRequest

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CardsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://staging-apigw.getduna.com:443")
        }
    }

    /**
     * Bin detector
     * Get Bin
     * @param bin 
     * @param xApiKey  (optional)
     * @return CardsBinBinGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun cardsBinBinGet(bin: kotlin.String, xApiKey: kotlin.String? = null) : CardsBinBinGet200Response = withContext(Dispatchers.IO) {
        val localVarResponse = cardsBinBinGetWithHttpInfo(bin = bin, xApiKey = xApiKey)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CardsBinBinGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Bin detector
     * Get Bin
     * @param bin 
     * @param xApiKey  (optional)
     * @return ApiResponse<CardsBinBinGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun cardsBinBinGetWithHttpInfo(bin: kotlin.String?, xApiKey: kotlin.String?) : ApiResponse<CardsBinBinGet200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = cardsBinBinGetRequestConfig(bin = bin, xApiKey = xApiKey)

        return@withContext request<Unit, CardsBinBinGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cardsBinBinGet
     *
     * @param bin 
     * @param xApiKey  (optional)
     * @return RequestConfig
     */
    fun cardsBinBinGetRequestConfig(bin: kotlin.String?, xApiKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xApiKey?.apply { localVariableHeaders["X-Api-Key"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/cards/bin/{bin}".replace("{"+"bin"+"}", encodeURIComponent(bin.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Eliminar una tarjeta
     * Eliminar una tarjeta.
     * @param userId 
     * @param cardId 
     * @param authorization  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteUsersUserIdCardsCardId(userId: kotlin.String, cardId: kotlin.String, authorization: kotlin.String? = null) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = deleteUsersUserIdCardsCardIdWithHttpInfo(userId = userId, cardId = cardId, authorization = authorization)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Eliminar una tarjeta
     * Eliminar una tarjeta.
     * @param userId 
     * @param cardId 
     * @param authorization  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun deleteUsersUserIdCardsCardIdWithHttpInfo(userId: kotlin.String?, cardId: kotlin.String?, authorization: kotlin.String?) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = deleteUsersUserIdCardsCardIdRequestConfig(userId = userId, cardId = cardId, authorization = authorization)

        return@withContext request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteUsersUserIdCardsCardId
     *
     * @param userId 
     * @param cardId 
     * @param authorization  (optional)
     * @return RequestConfig
     */
    fun deleteUsersUserIdCardsCardIdRequestConfig(userId: kotlin.String?, cardId: kotlin.String?, authorization: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/payments-cards/users/{user_id}/cards/{card_id}".replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())).replace("{"+"card_id"+"}", encodeURIComponent(cardId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Obtener todas las tarjetas del usuario
     * Obtener todas las tarjetas del usuario
     * @param userId 
     * @param authorization  (optional)
     * @return GetUserCards200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getUserCards(userId: kotlin.String, authorization: kotlin.String? = null) : GetUserCards200Response = withContext(Dispatchers.IO) {
        val localVarResponse = getUserCardsWithHttpInfo(userId = userId, authorization = authorization)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserCards200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Obtener todas las tarjetas del usuario
     * Obtener todas las tarjetas del usuario
     * @param userId 
     * @param authorization  (optional)
     * @return ApiResponse<GetUserCards200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getUserCardsWithHttpInfo(userId: kotlin.String?, authorization: kotlin.String?) : ApiResponse<GetUserCards200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getUserCardsRequestConfig(userId = userId, authorization = authorization)

        return@withContext request<Unit, GetUserCards200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserCards
     *
     * @param userId 
     * @param authorization  (optional)
     * @return RequestConfig
     */
    fun getUserCardsRequestConfig(userId: kotlin.String?, authorization: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/payments-cards/users/{user_id}/cards".replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Obtener una tarjeta
     * Obtener una tarjeta por su identificador.
     * @param userId 
     * @param cardId 
     * @param authorization  (optional)
     * @return GetUserIdCards200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getUserIdCards(userId: kotlin.String, cardId: kotlin.String, authorization: kotlin.String? = null) : GetUserIdCards200Response = withContext(Dispatchers.IO) {
        val localVarResponse = getUserIdCardsWithHttpInfo(userId = userId, cardId = cardId, authorization = authorization)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserIdCards200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Obtener una tarjeta
     * Obtener una tarjeta por su identificador.
     * @param userId 
     * @param cardId 
     * @param authorization  (optional)
     * @return ApiResponse<GetUserIdCards200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getUserIdCardsWithHttpInfo(userId: kotlin.String?, cardId: kotlin.String?, authorization: kotlin.String?) : ApiResponse<GetUserIdCards200Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getUserIdCardsRequestConfig(userId = userId, cardId = cardId, authorization = authorization)

        return@withContext request<Unit, GetUserIdCards200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserIdCards
     *
     * @param userId 
     * @param cardId 
     * @param authorization  (optional)
     * @return RequestConfig
     */
    fun getUserIdCardsRequestConfig(userId: kotlin.String?, cardId: kotlin.String?, authorization: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/payments-cards/users/{user_id}/cards/{card_id}".replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())).replace("{"+"card_id"+"}", encodeURIComponent(cardId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Crear una tarjeta
     * Crear una tarjeta para el usuario.
     * @param userId 
     * @param authorization  (optional)
     * @param postUsersUserIdCardsRequest  (optional)
     * @return PostUsersUserIdCards201Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun postUsersUserIdCards(userId: kotlin.String, authorization: kotlin.String? = null, postUsersUserIdCardsRequest: PostUsersUserIdCardsRequest? = null) : PostUsersUserIdCards201Response = withContext(Dispatchers.IO) {
        val localVarResponse = postUsersUserIdCardsWithHttpInfo(userId = userId, authorization = authorization, postUsersUserIdCardsRequest = postUsersUserIdCardsRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PostUsersUserIdCards201Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Crear una tarjeta
     * Crear una tarjeta para el usuario.
     * @param userId 
     * @param authorization  (optional)
     * @param postUsersUserIdCardsRequest  (optional)
     * @return ApiResponse<PostUsersUserIdCards201Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun postUsersUserIdCardsWithHttpInfo(userId: kotlin.String?, authorization: kotlin.String?, postUsersUserIdCardsRequest: PostUsersUserIdCardsRequest?) : ApiResponse<PostUsersUserIdCards201Response?> = withContext(Dispatchers.IO) {
        val localVariableConfig = postUsersUserIdCardsRequestConfig(userId = userId, authorization = authorization, postUsersUserIdCardsRequest = postUsersUserIdCardsRequest)

        return@withContext request<PostUsersUserIdCardsRequest, PostUsersUserIdCards201Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postUsersUserIdCards
     *
     * @param userId 
     * @param authorization  (optional)
     * @param postUsersUserIdCardsRequest  (optional)
     * @return RequestConfig
     */
    fun postUsersUserIdCardsRequestConfig(userId: kotlin.String?, authorization: kotlin.String?, postUsersUserIdCardsRequest: PostUsersUserIdCardsRequest?) : RequestConfig<PostUsersUserIdCardsRequest> {
        val localVariableBody = postUsersUserIdCardsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/payments-cards/users/{user_id}/cards".replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments()[0]
}
