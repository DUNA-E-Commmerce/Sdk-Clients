import com.amazonaws.services.securitytoken.model.AssumeRoleRequest
import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder

group 'io.deuna.apigw_kotlin_sdk'
version '0.1.71'

project.ext {
    repository = ""
    roleArn = ""
    projectGroup = ""
    awsRegion = ""
}

if (project.hasProperty('repository')) {
    project.ext.repository = repository
    println("La propiedad 'repository' est치 definida.")
}

if (project.hasProperty('roleArn')) {
    project.ext.roleArn = roleArn
    println("La propiedad 'roleArn' est치 definida.")
}

if (project.hasProperty('projectGroup')) {
    project.ext.projectGroup = projectGroup
    println("La propiedad 'projectGroup' est치 definida.")
}

if (project.hasProperty('awsRegion')) {
    project.ext.awsRegion = awsRegion
    println("La propiedad 'awsRegion' est치 definida.")
}

wrapper {
    gradleVersion = '7.5'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

buildscript {
    ext.kotlin_version = '1.7.21'

    repositories {
        maven { url "https://repo1.maven.org/maven2" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.amazonaws:aws-java-sdk-sts:1.11.977'
    }
}

apply plugin: 'kotlin'
apply plugin: 'maven-publish'

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "https://getduna-com.d.codeartifact.us-east-2.amazonaws.com/maven/kotlin-store/"
            credentials(AwsCredentials) {
                def sts = AWSSecurityTokenServiceClientBuilder.standard()
                        .withRegion("us-east-2")
                        .build()
                def result
                try {
                    result = sts.assumeRole(new AssumeRoleRequest()
                            .withRoleArn("arn:aws:iam::661995054732:role/RoleForGithubPushCodeArtifactAllService").withRoleSessionName("RoleForGithubPushCodeArtifactAllService"))
                } catch (Exception e) {
                    println "Error al asumir el rol: $e.message"
                    throw e
                }
                println "AssumeRole result: $result"
                accessKey = result.credentials.accessKeyId
                secretKey = result.credentials.secretAccessKey
                sessionToken = result.credentials.sessionToken
            }
        }
    }
}

tasks.named("publish") {
    dependsOn("publishToMavenLocal")
    doLast {
        println "Artifacts published to remote repository"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.squareup.moshi:moshi-kotlin:1.13.0"
    implementation "com.squareup.moshi:moshi-adapters:1.13.0"
    implementation 'com.amazonaws:aws-java-sdk-sts:1.12.514'
    implementation "com.google.code.gson:gson:2.10.1"
    implementation 'com.amazonaws:aws-java-sdk-sts:1.11.977'
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.4.2"
}
