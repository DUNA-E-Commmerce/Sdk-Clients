/*
 * API Gateway
 * API Gateway
 *
 * OpenAPI spec version: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {MerchantIdApplicationsBody} from '../model/MerchantIdApplicationsBody';

/**
* MerchantApplication service.
* @module api/MerchantApplicationApi
* @version 1.0
*/
export class MerchantApplicationApi {

    /**
    * Constructs a new MerchantApplicationApi. 
    * @alias module:api/MerchantApplicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the merchantsApplicationsValidateGet operation.
     * @callback moduleapi/MerchantApplicationApi~merchantsApplicationsValidateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Application
     * Validate application
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {module:api/MerchantApplicationApi~merchantsApplicationsValidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    merchantsApplicationsValidateGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
        
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/merchants/applications/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the merchantsMerchantIdApplicationsApplicationIdGet operation.
     * @callback moduleapi/MerchantApplicationApi~merchantsMerchantIdApplicationsApplicationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Application
     * Get application by ID
     * @param {String} merchantId 
     * @param {String} applicationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/MerchantApplicationApi~merchantsMerchantIdApplicationsApplicationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    merchantsMerchantIdApplicationsApplicationIdGet(merchantId, applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling merchantsMerchantIdApplicationsApplicationIdGet");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling merchantsMerchantIdApplicationsApplicationIdGet");
      }

      let pathParams = {
        'merchant_id': merchantId,'application_id': applicationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/merchants/{merchant_id}/applications/{application_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the merchantsMerchantIdApplicationsGet operation.
     * @callback moduleapi/MerchantApplicationApi~merchantsMerchantIdApplicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Applications
     * Get applications of merchant
     * @param {String} merchantId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/MerchantApplicationApi~merchantsMerchantIdApplicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    merchantsMerchantIdApplicationsGet(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling merchantsMerchantIdApplicationsGet");
      }

      let pathParams = {
        'merchant_id': merchantId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/merchants/{merchant_id}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the merchantsMerchantIdApplicationsPost operation.
     * @callback moduleapi/MerchantApplicationApi~merchantsMerchantIdApplicationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Application
     * Create application
     * @param {String} merchantId 
     * @param {Object} opts Optional parameters
     * @param {module:model/MerchantIdApplicationsBody} opts.body 
     * @param {String} opts.authorization 
     * @param {module:api/MerchantApplicationApi~merchantsMerchantIdApplicationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    merchantsMerchantIdApplicationsPost(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling merchantsMerchantIdApplicationsPost");
      }

      let pathParams = {
        'merchant_id': merchantId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/merchants/{merchant_id}/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}