/**
 * API Gateway
 * API Gateway
 *
 * The version of the OpenAPI document: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MerchantsExternalOrdersOrderTokenCouponsPost200Response from '../model/MerchantsExternalOrdersOrderTokenCouponsPost200Response';
import MerchantsExternalOrdersOrderTokenCouponsPostRequest from '../model/MerchantsExternalOrdersOrderTokenCouponsPostRequest';
import MerchantsExternalOrdersOrderTokenGiftCardsPost200Response from '../model/MerchantsExternalOrdersOrderTokenGiftCardsPost200Response';
import MerchantsExternalOrdersOrderTokenGiftCardsPostRequest from '../model/MerchantsExternalOrdersOrderTokenGiftCardsPostRequest';
import MerchantsExternalOrdersOrderTokenShippingMethodsCodePatch200Response from '../model/MerchantsExternalOrdersOrderTokenShippingMethodsCodePatch200Response';
import MerchantsExternalOrdersOrderTokenShippingMethodsPost200Response from '../model/MerchantsExternalOrdersOrderTokenShippingMethodsPost200Response';
import MerchantsExternalOrdersOrderTokenShippingMethodsPostRequest from '../model/MerchantsExternalOrdersOrderTokenShippingMethodsPostRequest';
import MerchantsExternalOrdersOrderTokenShippingRatePost200Response from '../model/MerchantsExternalOrdersOrderTokenShippingRatePost200Response';
import MerchantsExternalOrdersOrderTokenShippingRatePostRequest from '../model/MerchantsExternalOrdersOrderTokenShippingRatePostRequest';
import MerchantsOrdersOrderTokenPaymentsMethodsGet200Response from '../model/MerchantsOrdersOrderTokenPaymentsMethodsGet200Response';
import MerchantsOrdersOrderTokenTransactionsVerifyPost200Response from '../model/MerchantsOrdersOrderTokenTransactionsVerifyPost200Response';
import MerchantsOrdersOrderTokenTransactionsVerifyPostRequest from '../model/MerchantsOrdersOrderTokenTransactionsVerifyPostRequest';
import MerchantsOrdersPostRequest from '../model/MerchantsOrdersPostRequest';
import MerchantsTransactionsPurchasePost200Response from '../model/MerchantsTransactionsPurchasePost200Response';
import MerchantsTransactionsPurchasePostRequest from '../model/MerchantsTransactionsPurchasePostRequest';

/**
* ExternalMerchantAPI service.
* @module api/ExternalMerchantAPIApi
* @version 1.0
*/
export default class ExternalMerchantAPIApi {

    /**
    * Constructs a new ExternalMerchantAPIApi. 
    * @alias module:api/ExternalMerchantAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Remove Coupon
     * Remove coupon
     * @param {String} orderToken 
     * @param {String} couponCode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsExternalOrdersOrderTokenCouponsPost200Response} and HTTP response
     */
    merchantsExternalOrdersOrderTokenCouponsCouponCodeDeleteWithHttpInfo(orderToken, couponCode, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsExternalOrdersOrderTokenCouponsCouponCodeDelete");
      }
      // verify the required parameter 'couponCode' is set
      if (couponCode === undefined || couponCode === null) {
        throw new Error("Missing the required parameter 'couponCode' when calling merchantsExternalOrdersOrderTokenCouponsCouponCodeDelete");
      }

      let pathParams = {
        'order_token': orderToken,
        'coupon_code': couponCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantsExternalOrdersOrderTokenCouponsPost200Response;
      return this.apiClient.callApi(
        '/merchants/external-orders/{order_token}/coupons/{coupon_code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove Coupon
     * Remove coupon
     * @param {String} orderToken 
     * @param {String} couponCode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsExternalOrdersOrderTokenCouponsPost200Response}
     */
    merchantsExternalOrdersOrderTokenCouponsCouponCodeDelete(orderToken, couponCode, opts) {
      return this.merchantsExternalOrdersOrderTokenCouponsCouponCodeDeleteWithHttpInfo(orderToken, couponCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Apply Coupon
     * Apply coupon
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @param {module:model/MerchantsExternalOrdersOrderTokenCouponsPostRequest} opts.merchantsExternalOrdersOrderTokenCouponsPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsExternalOrdersOrderTokenCouponsPost200Response} and HTTP response
     */
    merchantsExternalOrdersOrderTokenCouponsPostWithHttpInfo(orderToken, opts) {
      opts = opts || {};
      let postBody = opts['merchantsExternalOrdersOrderTokenCouponsPostRequest'];
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsExternalOrdersOrderTokenCouponsPost");
      }

      let pathParams = {
        'order_token': orderToken
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantsExternalOrdersOrderTokenCouponsPost200Response;
      return this.apiClient.callApi(
        '/merchants/external-orders/{order_token}/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Apply Coupon
     * Apply coupon
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @param {module:model/MerchantsExternalOrdersOrderTokenCouponsPostRequest} opts.merchantsExternalOrdersOrderTokenCouponsPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsExternalOrdersOrderTokenCouponsPost200Response}
     */
    merchantsExternalOrdersOrderTokenCouponsPost(orderToken, opts) {
      return this.merchantsExternalOrdersOrderTokenCouponsPostWithHttpInfo(orderToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Apply Gift Card
     * Apply Gift Card
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @param {module:model/MerchantsExternalOrdersOrderTokenGiftCardsPostRequest} opts.merchantsExternalOrdersOrderTokenGiftCardsPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsExternalOrdersOrderTokenGiftCardsPost200Response} and HTTP response
     */
    merchantsExternalOrdersOrderTokenGiftCardsPostWithHttpInfo(orderToken, opts) {
      opts = opts || {};
      let postBody = opts['merchantsExternalOrdersOrderTokenGiftCardsPostRequest'];
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsExternalOrdersOrderTokenGiftCardsPost");
      }

      let pathParams = {
        'order_token': orderToken
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantsExternalOrdersOrderTokenGiftCardsPost200Response;
      return this.apiClient.callApi(
        '/merchants/external-orders/{order_token}/gift-cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Apply Gift Card
     * Apply Gift Card
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @param {module:model/MerchantsExternalOrdersOrderTokenGiftCardsPostRequest} opts.merchantsExternalOrdersOrderTokenGiftCardsPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsExternalOrdersOrderTokenGiftCardsPost200Response}
     */
    merchantsExternalOrdersOrderTokenGiftCardsPost(orderToken, opts) {
      return this.merchantsExternalOrdersOrderTokenGiftCardsPostWithHttpInfo(orderToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the selected shipping method
     * Update the selected shipping method
     * @param {String} orderToken 
     * @param {String} code 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsExternalOrdersOrderTokenShippingMethodsCodePatch200Response} and HTTP response
     */
    merchantsExternalOrdersOrderTokenShippingMethodsCodePatchWithHttpInfo(orderToken, code, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsExternalOrdersOrderTokenShippingMethodsCodePatch");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling merchantsExternalOrdersOrderTokenShippingMethodsCodePatch");
      }

      let pathParams = {
        'order_token': orderToken,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantsExternalOrdersOrderTokenShippingMethodsCodePatch200Response;
      return this.apiClient.callApi(
        '/merchants/external-orders/{order_token}/shipping-methods/{code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the selected shipping method
     * Update the selected shipping method
     * @param {String} orderToken 
     * @param {String} code 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsExternalOrdersOrderTokenShippingMethodsCodePatch200Response}
     */
    merchantsExternalOrdersOrderTokenShippingMethodsCodePatch(orderToken, code, opts) {
      return this.merchantsExternalOrdersOrderTokenShippingMethodsCodePatchWithHttpInfo(orderToken, code, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get shipping methods
     * Get shipping methods
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @param {module:model/MerchantsExternalOrdersOrderTokenShippingMethodsPostRequest} opts.merchantsExternalOrdersOrderTokenShippingMethodsPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsExternalOrdersOrderTokenShippingMethodsPost200Response} and HTTP response
     */
    merchantsExternalOrdersOrderTokenShippingMethodsPostWithHttpInfo(orderToken, opts) {
      opts = opts || {};
      let postBody = opts['merchantsExternalOrdersOrderTokenShippingMethodsPostRequest'];
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsExternalOrdersOrderTokenShippingMethodsPost");
      }

      let pathParams = {
        'order_token': orderToken
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantsExternalOrdersOrderTokenShippingMethodsPost200Response;
      return this.apiClient.callApi(
        '/merchants/external-orders/{order_token}/shipping-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get shipping methods
     * Get shipping methods
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @param {module:model/MerchantsExternalOrdersOrderTokenShippingMethodsPostRequest} opts.merchantsExternalOrdersOrderTokenShippingMethodsPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsExternalOrdersOrderTokenShippingMethodsPost200Response}
     */
    merchantsExternalOrdersOrderTokenShippingMethodsPost(orderToken, opts) {
      return this.merchantsExternalOrdersOrderTokenShippingMethodsPostWithHttpInfo(orderToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Shipping Rate
     * Get shipping rate
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @param {String} opts.lat 
     * @param {String} opts.lon 
     * @param {String} opts.city 
     * @param {String} opts.countryIso 
     * @param {module:model/MerchantsExternalOrdersOrderTokenShippingRatePostRequest} opts.merchantsExternalOrdersOrderTokenShippingRatePostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsExternalOrdersOrderTokenShippingRatePost200Response} and HTTP response
     */
    merchantsExternalOrdersOrderTokenShippingRatePostWithHttpInfo(orderToken, opts) {
      opts = opts || {};
      let postBody = opts['merchantsExternalOrdersOrderTokenShippingRatePostRequest'];
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsExternalOrdersOrderTokenShippingRatePost");
      }

      let pathParams = {
        'order_token': orderToken
      };
      let queryParams = {
        'lat': opts['lat'],
        'lon': opts['lon'],
        'city': opts['city'],
        'country_iso': opts['countryIso']
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantsExternalOrdersOrderTokenShippingRatePost200Response;
      return this.apiClient.callApi(
        '/merchants/external-orders/{order_token}/shipping-rate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Shipping Rate
     * Get shipping rate
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.authorization 
     * @param {String} opts.lat 
     * @param {String} opts.lon 
     * @param {String} opts.city 
     * @param {String} opts.countryIso 
     * @param {module:model/MerchantsExternalOrdersOrderTokenShippingRatePostRequest} opts.merchantsExternalOrdersOrderTokenShippingRatePostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsExternalOrdersOrderTokenShippingRatePost200Response}
     */
    merchantsExternalOrdersOrderTokenShippingRatePost(orderToken, opts) {
      return this.merchantsExternalOrdersOrderTokenShippingRatePostWithHttpInfo(orderToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get order
     * Get order by token
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsExternalOrdersOrderTokenCouponsPost200Response} and HTTP response
     */
    merchantsOrdersOrderTokenGetWithHttpInfo(orderToken, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsOrdersOrderTokenGet");
      }

      let pathParams = {
        'order_token': orderToken
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantsExternalOrdersOrderTokenCouponsPost200Response;
      return this.apiClient.callApi(
        '/merchants/orders/{order_token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get order
     * Get order by token
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsExternalOrdersOrderTokenCouponsPost200Response}
     */
    merchantsOrdersOrderTokenGet(orderToken, opts) {
      return this.merchantsOrdersOrderTokenGetWithHttpInfo(orderToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Payment Methods
     * Get payment methods
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xStoreCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsOrdersOrderTokenPaymentsMethodsGet200Response} and HTTP response
     */
    merchantsOrdersOrderTokenPaymentsMethodsGetWithHttpInfo(orderToken, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsOrdersOrderTokenPaymentsMethodsGet");
      }

      let pathParams = {
        'order_token': orderToken
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'X-Api-Key': opts['xApiKey'],
        'X-Store-Code': opts['xStoreCode']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantsOrdersOrderTokenPaymentsMethodsGet200Response;
      return this.apiClient.callApi(
        '/merchants/orders/{order_token}/payments-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Payment Methods
     * Get payment methods
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xStoreCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsOrdersOrderTokenPaymentsMethodsGet200Response}
     */
    merchantsOrdersOrderTokenPaymentsMethodsGet(orderToken, opts) {
      return this.merchantsOrdersOrderTokenPaymentsMethodsGetWithHttpInfo(orderToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Verify OTP Dinners
     * Verify OTP Dinners
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantID 
     * @param {String} opts.xStoreCode 
     * @param {module:model/MerchantsOrdersOrderTokenTransactionsVerifyPostRequest} opts.merchantsOrdersOrderTokenTransactionsVerifyPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsOrdersOrderTokenTransactionsVerifyPost200Response} and HTTP response
     */
    merchantsOrdersOrderTokenTransactionsVerifyPostWithHttpInfo(orderToken, opts) {
      opts = opts || {};
      let postBody = opts['merchantsOrdersOrderTokenTransactionsVerifyPostRequest'];
      // verify the required parameter 'orderToken' is set
      if (orderToken === undefined || orderToken === null) {
        throw new Error("Missing the required parameter 'orderToken' when calling merchantsOrdersOrderTokenTransactionsVerifyPost");
      }

      let pathParams = {
        'order_token': orderToken
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'X-Api-Key': opts['xApiKey'],
        'X-Merchant-ID': opts['xMerchantID'],
        'X-Store-Code': opts['xStoreCode']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantsOrdersOrderTokenTransactionsVerifyPost200Response;
      return this.apiClient.callApi(
        '/merchants/orders/{order_token}/transactions/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Verify OTP Dinners
     * Verify OTP Dinners
     * @param {String} orderToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantID 
     * @param {String} opts.xStoreCode 
     * @param {module:model/MerchantsOrdersOrderTokenTransactionsVerifyPostRequest} opts.merchantsOrdersOrderTokenTransactionsVerifyPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsOrdersOrderTokenTransactionsVerifyPost200Response}
     */
    merchantsOrdersOrderTokenTransactionsVerifyPost(orderToken, opts) {
      return this.merchantsOrdersOrderTokenTransactionsVerifyPostWithHttpInfo(orderToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Order
     * Create order
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {module:model/MerchantsOrdersPostRequest} opts.merchantsOrdersPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsExternalOrdersOrderTokenCouponsPost200Response} and HTTP response
     */
    merchantsOrdersPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['merchantsOrdersPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantsExternalOrdersOrderTokenCouponsPost200Response;
      return this.apiClient.callApi(
        '/merchants/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Order
     * Create order
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {module:model/MerchantsOrdersPostRequest} opts.merchantsOrdersPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsExternalOrdersOrderTokenCouponsPost200Response}
     */
    merchantsOrdersPost(opts) {
      return this.merchantsOrdersPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Purchase
     * Purchase
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantID 
     * @param {String} opts.xStoreCode 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.xSessionId 
     * @param {String} opts.userAgent 
     * @param {module:model/MerchantsTransactionsPurchasePostRequest} opts.merchantsTransactionsPurchasePostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MerchantsTransactionsPurchasePost200Response} and HTTP response
     */
    merchantsTransactionsPurchasePostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['merchantsTransactionsPurchasePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'X-Api-Key': opts['xApiKey'],
        'X-Merchant-ID': opts['xMerchantID'],
        'X-Store-Code': opts['xStoreCode'],
        'X-Device-Id': opts['xDeviceId'],
        'X-Session-Id': opts['xSessionId'],
        'User-Agent': opts['userAgent']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantsTransactionsPurchasePost200Response;
      return this.apiClient.callApi(
        '/merchants/transactions/purchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Purchase
     * Purchase
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantID 
     * @param {String} opts.xStoreCode 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.xSessionId 
     * @param {String} opts.userAgent 
     * @param {module:model/MerchantsTransactionsPurchasePostRequest} opts.merchantsTransactionsPurchasePostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MerchantsTransactionsPurchasePost200Response}
     */
    merchantsTransactionsPurchasePost(opts) {
      return this.merchantsTransactionsPurchasePostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
