/**
 * API Gateway
 * API Gateway
 *
 * The version of the OpenAPI document: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsersLoginDeviceFingerprintPost200Response from '../model/UsersLoginDeviceFingerprintPost200Response';
import UsersMeGet200Response from '../model/UsersMeGet200Response';

/**
* Users service.
* @module api/UsersApi
* @version 1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Login User
     * Login User
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.xSessionID 
     * @param {String} opts.authorization 
     * @param {String} opts.type 
     * @param {String} opts.loadProfileData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersLoginDeviceFingerprintPost200Response} and HTTP response
     */
    usersLoginDeviceFingerprintPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'load_profile_data': opts['loadProfileData']
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],
        'X-Merchant-Id': opts['xMerchantId'],
        'X-Device-Id': opts['xDeviceId'],
        'X-Session-ID': opts['xSessionID'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersLoginDeviceFingerprintPost200Response;
      return this.apiClient.callApi(
        '/users/login/device-fingerprint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Login User
     * Login User
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.xSessionID 
     * @param {String} opts.authorization 
     * @param {String} opts.type 
     * @param {String} opts.loadProfileData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersLoginDeviceFingerprintPost200Response}
     */
    usersLoginDeviceFingerprintPost(opts) {
      return this.usersLoginDeviceFingerprintPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get User Information
     * Get User Information
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersMeGet200Response} and HTTP response
     */
    usersMeGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],
        'X-Merchant-Id': opts['xMerchantId'],
        'X-Device-Id': opts['xDeviceId'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersMeGet200Response;
      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get User Information
     * Get User Information
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersMeGet200Response}
     */
    usersMeGet(opts) {
      return this.usersMeGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
