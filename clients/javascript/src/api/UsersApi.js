/*
 * API Gateway
 * API Gateway
 *
 * OpenAPI spec version: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse2003} from '../model/InlineResponse2003';
import {InlineResponse2004} from '../model/InlineResponse2004';
import {InlineResponse2005} from '../model/InlineResponse2005';
import {InlineResponse2006} from '../model/InlineResponse2006';
import {InlineResponse2007} from '../model/InlineResponse2007';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {InlineResponse401} from '../model/InlineResponse401';
import {InlineResponse4011} from '../model/InlineResponse4011';
import {UserIdCardsBody} from '../model/UserIdCardsBody';
import {UsersLoginBody} from '../model/UsersLoginBody';
import {UsersRegisterBody} from '../model/UsersRegisterBody';
import {UsersRequestcodeBody} from '../model/UsersRequestcodeBody';

/**
* Users service.
* @module api/UsersApi
* @version 1.0
*/
export class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the paymentsCardsUsersUserIdCardsCardIdDelete operation.
     * @callback moduleapi/UsersApi~paymentsCardsUsersUserIdCardsCardIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all user cards
     * Get all user cards
     * @param {String} userId 
     * @param {String} cardId 
     * @param {Object} opts Optional parameters
     * @param {String} opts. 
     * @param {module:api/UsersApi~paymentsCardsUsersUserIdCardsCardIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    paymentsCardsUsersUserIdCardsCardIdDelete(userId, cardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling paymentsCardsUsersUserIdCardsCardIdDelete");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling paymentsCardsUsersUserIdCardsCardIdDelete");
      }

      let pathParams = {
        'user_id': userId,'card_id': cardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        '*': opts['']
      };
      let formParams = {
        
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/payments-cards/users/{user_id}/cards/{card_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the paymentsCardsUsersUserIdCardsCardIdGet operation.
     * @callback moduleapi/UsersApi~paymentsCardsUsersUserIdCardsCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain a card by its identifier.
     * Obtain a card by its identifier.
     * @param {String} userId 
     * @param {String} cardId 
     * @param {Object} opts Optional parameters
     * @param {String} opts. 
     * @param {module:api/UsersApi~paymentsCardsUsersUserIdCardsCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    paymentsCardsUsersUserIdCardsCardIdGet(userId, cardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling paymentsCardsUsersUserIdCardsCardIdGet");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling paymentsCardsUsersUserIdCardsCardIdGet");
      }

      let pathParams = {
        'user_id': userId,'card_id': cardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        '*': opts['']
      };
      let formParams = {
        
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/payments-cards/users/{user_id}/cards/{card_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the paymentsCardsUsersUserIdCardsGet operation.
     * @callback moduleapi/UsersApi~paymentsCardsUsersUserIdCardsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2003>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all user cards
     * Get all user cards
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts. 
     * @param {module:api/UsersApi~paymentsCardsUsersUserIdCardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    paymentsCardsUsersUserIdCardsGet(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling paymentsCardsUsersUserIdCardsGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        '*': opts['']
      };
      let formParams = {
        
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2003];

      return this.apiClient.callApi(
        '/payments-cards/users/{user_id}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the paymentsCardsUsersUserIdCardsPost operation.
     * @callback moduleapi/UsersApi~paymentsCardsUsersUserIdCardsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all user cards
     * Get all user cards
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdCardsBody} opts.body 
     * @param {String} opts. 
     * @param {module:api/UsersApi~paymentsCardsUsersUserIdCardsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    paymentsCardsUsersUserIdCardsPost(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling paymentsCardsUsersUserIdCardsPost");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        '*': opts['']
      };
      let formParams = {
        
      };

      let authNames = ['X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/payments-cards/users/{user_id}/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersLoginDeviceFingerprintPost operation.
     * @callback moduleapi/UsersApi~usersLoginDeviceFingerprintPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login User
     * Login User
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.xSessionID 
     * @param {String} opts.authorization 
     * @param {String} opts.type 
     * @param {String} opts.loadProfileData 
     * @param {module:api/UsersApi~usersLoginDeviceFingerprintPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersLoginDeviceFingerprintPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'type': opts['type'],'load_profile_data': opts['loadProfileData']
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],'X-Merchant-Id': opts['xMerchantId'],'X-Device-Id': opts['xDeviceId'],'X-Session-ID': opts['xSessionID'],'Authorization': opts['authorization']
      };
      let formParams = {
        
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/users/login/device-fingerprint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersLoginPost operation.
     * @callback moduleapi/UsersApi~usersLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows logging in with the OTP code sent to the user&#x27;s email or phone. This must be specified in the query param.
     * Allows logging in with the OTP code sent to the user&#x27;s email or phone. This must be specified in the query param.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersLoginBody} opts.body 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.xSessionID 
     * @param {String} opts.authorization 
     * @param {String} opts.xRecaptchaToken 
     * @param {String} opts.type 
     * @param {String} opts.loadProfileData 
     * @param {module:api/UsersApi~usersLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersLoginPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'type': opts['type'],'load_profile_data': opts['loadProfileData']
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],'X-Merchant-Id': opts['xMerchantId'],'X-Device-Id': opts['xDeviceId'],'X-Session-ID': opts['xSessionID'],'Authorization': opts['authorization'],'X-Recaptcha-Token': opts['xRecaptchaToken']
      };
      let formParams = {
        
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersMeGet operation.
     * @callback moduleapi/UsersApi~usersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Information
     * Get User Information
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.authorization 
     * @param {module:api/UsersApi~usersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersMeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],'X-Merchant-Id': opts['xMerchantId'],'X-Device-Id': opts['xDeviceId'],'Authorization': opts['authorization']
      };
      let formParams = {
        
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersRegisterPost operation.
     * @callback moduleapi/UsersApi~usersRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register User
     * Register a user of your business, this user once registered will belong to the DEUNA Network.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersRegisterBody} opts.body 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {module:api/UsersApi~usersRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersRegisterPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],'X-Merchant-Id': opts['xMerchantId']
      };
      let formParams = {
        
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/users/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersRequestCodePost operation.
     * @callback moduleapi/UsersApi~usersRequestCodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows logging in with the OTP code sent to the user&#x27;s email or phone. This must be specified in the query param.
     * Allows logging in with the OTP code sent to the user&#x27;s email or phone. This must be specified in the query param.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersRequestcodeBody} opts.body 
     * @param {String} opts.xApiKey 
     * @param {String} opts.xMerchantId 
     * @param {String} opts.xDeviceId 
     * @param {String} opts.authorization 
     * @param {String} opts.type 
     * @param {module:api/UsersApi~usersRequestCodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersRequestCodePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey'],'X-Merchant-Id': opts['xMerchantId'],'X-Device-Id': opts['xDeviceId'],'Authorization': opts['authorization']
      };
      let formParams = {
        
      };

      let authNames = ['Authorization', 'X-Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/request-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}