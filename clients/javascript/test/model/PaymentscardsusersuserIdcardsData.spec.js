/*
 * API Gateway
 * API Gateway
 *
 * OpenAPI spec version: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiGateway);
  }
}(this, function(expect, ApiGateway) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PaymentscardsusersuserIdcardsData', function() {
      beforeEach(function() {
        instance = new ApiGateway.PaymentscardsusersuserIdcardsData();
      });

      it('should create an instance of PaymentscardsusersuserIdcardsData', function() {
        // TODO: update the code to test PaymentscardsusersuserIdcardsData
        expect(instance).to.be.a(ApiGateway.PaymentscardsusersuserIdcardsData);
      });

      it('should have the property cardHolder (base name: "card_holder")', function() {
        // TODO: update the code to test the property cardHolder
        expect(instance).to.have.property('cardHolder');
        // expect(instance.cardHolder).to.be(expectedValueLiteral);
      });

      it('should have the property cardHolderDni (base name: "card_holder_dni")', function() {
        // TODO: update the code to test the property cardHolderDni
        expect(instance).to.have.property('cardHolderDni');
        // expect(instance.cardHolderDni).to.be(expectedValueLiteral);
      });

      it('should have the property company (base name: "company")', function() {
        // TODO: update the code to test the property company
        expect(instance).to.have.property('company');
        // expect(instance.company).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property deletedAt (base name: "deleted_at")', function() {
        // TODO: update the code to test the property deletedAt
        expect(instance).to.have.property('deletedAt');
        // expect(instance.deletedAt).to.be(expectedValueLiteral);
      });

      it('should have the property expirationDate (base name: "expiration_date")', function() {
        // TODO: update the code to test the property expirationDate
        expect(instance).to.have.property('expirationDate');
        // expect(instance.expirationDate).to.be(expectedValueLiteral);
      });

      it('should have the property firstSix (base name: "first_six")', function() {
        // TODO: update the code to test the property firstSix
        expect(instance).to.have.property('firstSix');
        // expect(instance.firstSix).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property lastFour (base name: "last_four
")', function() {
        // TODO: update the code to test the property lastFour
        expect(instance).to.have.property('lastFour');
        // expect(instance.lastFour).to.be(expectedValueLiteral);
      });

      it('should have the property tokens (base name: "tokens")', function() {
        // TODO: update the code to test the property tokens
        expect(instance).to.have.property('tokens');
        // expect(instance.tokens).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "user_id")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

    });
  });

}));
