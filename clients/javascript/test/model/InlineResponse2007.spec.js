/*
 * API Gateway
 * API Gateway
 *
 * OpenAPI spec version: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiGateway);
  }
}(this, function(expect, ApiGateway) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2007', function() {
      beforeEach(function() {
        instance = new ApiGateway.InlineResponse2007();
      });

      it('should create an instance of InlineResponse2007', function() {
        // TODO: update the code to test InlineResponse2007
        expect(instance).to.be.a(ApiGateway.InlineResponse2007);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property deletedAt (base name: "deleted_at")', function() {
        // TODO: update the code to test the property deletedAt
        expect(instance).to.have.property('deletedAt');
        // expect(instance.deletedAt).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "first_name")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property identityProviders (base name: "identity_providers")', function() {
        // TODO: update the code to test the property identityProviders
        expect(instance).to.have.property('identityProviders');
        // expect(instance.identityProviders).to.be(expectedValueLiteral);
      });

      it('should have the property isGuest (base name: "is_guest")', function() {
        // TODO: update the code to test the property isGuest
        expect(instance).to.have.property('isGuest');
        // expect(instance.isGuest).to.be(expectedValueLiteral);
      });

      it('should have the property isPhoneVerified (base name: "is_phone_verified")', function() {
        // TODO: update the code to test the property isPhoneVerified
        expect(instance).to.have.property('isPhoneVerified');
        // expect(instance.isPhoneVerified).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "last_name")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property merchantId (base name: "merchant_id")', function() {
        // TODO: update the code to test the property merchantId
        expect(instance).to.have.property('merchantId');
        // expect(instance.merchantId).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
