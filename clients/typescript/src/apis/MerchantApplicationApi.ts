/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * API Gateway
 *
 * The version of the OpenAPI document: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MerchantsApplicationsValidateGet200Response,
  MerchantsMerchantIdApplicationsGet200Response,
  MerchantsMerchantIdApplicationsPost200Response,
  MerchantsMerchantIdApplicationsPostRequest,
} from '../models';
import {
    MerchantsApplicationsValidateGet200ResponseFromJSON,
    MerchantsApplicationsValidateGet200ResponseToJSON,
    MerchantsMerchantIdApplicationsGet200ResponseFromJSON,
    MerchantsMerchantIdApplicationsGet200ResponseToJSON,
    MerchantsMerchantIdApplicationsPost200ResponseFromJSON,
    MerchantsMerchantIdApplicationsPost200ResponseToJSON,
    MerchantsMerchantIdApplicationsPostRequestFromJSON,
    MerchantsMerchantIdApplicationsPostRequestToJSON,
} from '../models';

export interface MerchantsApplicationsValidateGetRequest {
    xApiKey?: string;
}

export interface MerchantsMerchantIdApplicationsApplicationIdGetRequest {
    merchantId: string;
    applicationId: string;
    authorization?: string;
}

export interface MerchantsMerchantIdApplicationsGetRequest {
    merchantId: string;
    authorization?: string;
}

export interface MerchantsMerchantIdApplicationsPostOperationRequest {
    merchantId: string;
    authorization?: string;
    merchantsMerchantIdApplicationsPostRequest?: MerchantsMerchantIdApplicationsPostRequest;
}

/**
 * MerchantApplicationApi - interface
 * 
 * @export
 * @interface MerchantApplicationApiInterface
 */
export interface MerchantApplicationApiInterface {
    /**
     * Validate application
     * @summary Validate Application
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApiInterface
     */
    merchantsApplicationsValidateGetRaw(requestParameters: MerchantsApplicationsValidateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantsApplicationsValidateGet200Response>>;

    /**
     * Validate application
     * Validate Application
     */
    merchantsApplicationsValidateGet(requestParameters: MerchantsApplicationsValidateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantsApplicationsValidateGet200Response>;

    /**
     * Get application by ID
     * @summary Get Application
     * @param {string} merchantId 
     * @param {string} applicationId 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApiInterface
     */
    merchantsMerchantIdApplicationsApplicationIdGetRaw(requestParameters: MerchantsMerchantIdApplicationsApplicationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantsMerchantIdApplicationsPost200Response>>;

    /**
     * Get application by ID
     * Get Application
     */
    merchantsMerchantIdApplicationsApplicationIdGet(requestParameters: MerchantsMerchantIdApplicationsApplicationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantsMerchantIdApplicationsPost200Response>;

    /**
     * Get applications of merchant
     * @summary Get Applications
     * @param {string} merchantId 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApiInterface
     */
    merchantsMerchantIdApplicationsGetRaw(requestParameters: MerchantsMerchantIdApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantsMerchantIdApplicationsGet200Response>>;

    /**
     * Get applications of merchant
     * Get Applications
     */
    merchantsMerchantIdApplicationsGet(requestParameters: MerchantsMerchantIdApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantsMerchantIdApplicationsGet200Response>;

    /**
     * Create application
     * @summary Create Application
     * @param {string} merchantId 
     * @param {string} [authorization] 
     * @param {MerchantsMerchantIdApplicationsPostRequest} [merchantsMerchantIdApplicationsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApiInterface
     */
    merchantsMerchantIdApplicationsPostRaw(requestParameters: MerchantsMerchantIdApplicationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantsMerchantIdApplicationsPost200Response>>;

    /**
     * Create application
     * Create Application
     */
    merchantsMerchantIdApplicationsPost(requestParameters: MerchantsMerchantIdApplicationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantsMerchantIdApplicationsPost200Response>;

}

/**
 * 
 */
export class MerchantApplicationApi extends runtime.BaseAPI implements MerchantApplicationApiInterface {

    /**
     * Validate application
     * Validate Application
     */
    async merchantsApplicationsValidateGetRaw(requestParameters: MerchantsApplicationsValidateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantsApplicationsValidateGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['X-Api-Key'] = String(requestParameters.xApiKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // X-Api-Key authentication
        }

        const response = await this.request({
            path: `/merchants/applications/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantsApplicationsValidateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Validate application
     * Validate Application
     */
    async merchantsApplicationsValidateGet(requestParameters: MerchantsApplicationsValidateGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantsApplicationsValidateGet200Response> {
        const response = await this.merchantsApplicationsValidateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get application by ID
     * Get Application
     */
    async merchantsMerchantIdApplicationsApplicationIdGetRaw(requestParameters: MerchantsMerchantIdApplicationsApplicationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantsMerchantIdApplicationsPost200Response>> {
        if (requestParameters.merchantId === null || requestParameters.merchantId === undefined) {
            throw new runtime.RequiredError('merchantId','Required parameter requestParameters.merchantId was null or undefined when calling merchantsMerchantIdApplicationsApplicationIdGet.');
        }

        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling merchantsMerchantIdApplicationsApplicationIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/merchants/{merchant_id}/applications/{application_id}`.replace(`{${"merchant_id"}}`, encodeURIComponent(String(requestParameters.merchantId))).replace(`{${"application_id"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantsMerchantIdApplicationsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get application by ID
     * Get Application
     */
    async merchantsMerchantIdApplicationsApplicationIdGet(requestParameters: MerchantsMerchantIdApplicationsApplicationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantsMerchantIdApplicationsPost200Response> {
        const response = await this.merchantsMerchantIdApplicationsApplicationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get applications of merchant
     * Get Applications
     */
    async merchantsMerchantIdApplicationsGetRaw(requestParameters: MerchantsMerchantIdApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantsMerchantIdApplicationsGet200Response>> {
        if (requestParameters.merchantId === null || requestParameters.merchantId === undefined) {
            throw new runtime.RequiredError('merchantId','Required parameter requestParameters.merchantId was null or undefined when calling merchantsMerchantIdApplicationsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/merchants/{merchant_id}/applications`.replace(`{${"merchant_id"}}`, encodeURIComponent(String(requestParameters.merchantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantsMerchantIdApplicationsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get applications of merchant
     * Get Applications
     */
    async merchantsMerchantIdApplicationsGet(requestParameters: MerchantsMerchantIdApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantsMerchantIdApplicationsGet200Response> {
        const response = await this.merchantsMerchantIdApplicationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create application
     * Create Application
     */
    async merchantsMerchantIdApplicationsPostRaw(requestParameters: MerchantsMerchantIdApplicationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantsMerchantIdApplicationsPost200Response>> {
        if (requestParameters.merchantId === null || requestParameters.merchantId === undefined) {
            throw new runtime.RequiredError('merchantId','Required parameter requestParameters.merchantId was null or undefined when calling merchantsMerchantIdApplicationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/merchants/{merchant_id}/applications`.replace(`{${"merchant_id"}}`, encodeURIComponent(String(requestParameters.merchantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantsMerchantIdApplicationsPostRequestToJSON(requestParameters.merchantsMerchantIdApplicationsPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantsMerchantIdApplicationsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create application
     * Create Application
     */
    async merchantsMerchantIdApplicationsPost(requestParameters: MerchantsMerchantIdApplicationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantsMerchantIdApplicationsPost200Response> {
        const response = await this.merchantsMerchantIdApplicationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
