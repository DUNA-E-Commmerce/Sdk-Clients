/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * API Gateway
 *
 * OpenAPI spec version: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2003 } from '../models';
import { InlineResponse2004 } from '../models';
import { InlineResponse2005 } from '../models';
import { InlineResponse2006 } from '../models';
import { InlineResponse2007 } from '../models';
import { InlineResponse2008 } from '../models';
import { InlineResponse401 } from '../models';
import { InlineResponse4011 } from '../models';
import { UserIdCardsBody } from '../models';
import { UsersLoginBody } from '../models';
import { UsersRegisterBody } from '../models';
import { UsersRequestcodeBody } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsCardsUsersUserIdCardsCardIdDelete: async (userId: string, cardId: string, ?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling paymentsCardsUsersUserIdCardsCardIdDelete.');
            }
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId','Required parameter cardId was null or undefined when calling paymentsCardsUsersUserIdCardsCardIdDelete.');
            }
            const localVarPath = `/payments-cards/users/{user_id}/cards/{card_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if ( !== undefined &&  !== null) {
                localVarHeaderParameter['*'] = String();
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsCardsUsersUserIdCardsCardIdGet: async (userId: string, cardId: string, ?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling paymentsCardsUsersUserIdCardsCardIdGet.');
            }
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId','Required parameter cardId was null or undefined when calling paymentsCardsUsersUserIdCardsCardIdGet.');
            }
            const localVarPath = `/payments-cards/users/{user_id}/cards/{card_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if ( !== undefined &&  !== null) {
                localVarHeaderParameter['*'] = String();
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsCardsUsersUserIdCardsGet: async (userId: string, ?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling paymentsCardsUsersUserIdCardsGet.');
            }
            const localVarPath = `/payments-cards/users/{user_id}/cards`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if ( !== undefined &&  !== null) {
                localVarHeaderParameter['*'] = String();
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {UserIdCardsBody} [body] 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsCardsUsersUserIdCardsPost: async (userId: string, body?: UserIdCardsBody, ?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling paymentsCardsUsersUserIdCardsPost.');
            }
            const localVarPath = `/payments-cards/users/{user_id}/cards`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if ( !== undefined &&  !== null) {
                localVarHeaderParameter['*'] = String();
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Login User
         * @summary Login User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginDeviceFingerprintPost: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, type?: string, loadProfileData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login/device-fingerprint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (loadProfileData !== undefined) {
                localVarQueryParameter['load_profile_data'] = loadProfileData;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId !== undefined && xMerchantId !== null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId !== undefined && xDeviceId !== null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (xSessionID !== undefined && xSessionID !== null) {
                localVarHeaderParameter['X-Session-ID'] = String(xSessionID);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @param {UsersLoginBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [xRecaptchaToken] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginPost: async (body?: UsersLoginBody, xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, xRecaptchaToken?: string, type?: string, loadProfileData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (loadProfileData !== undefined) {
                localVarQueryParameter['load_profile_data'] = loadProfileData;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId !== undefined && xMerchantId !== null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId !== undefined && xDeviceId !== null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (xSessionID !== undefined && xSessionID !== null) {
                localVarHeaderParameter['X-Session-ID'] = String(xSessionID);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xRecaptchaToken !== undefined && xRecaptchaToken !== null) {
                localVarHeaderParameter['X-Recaptcha-Token'] = String(xRecaptchaToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId !== undefined && xMerchantId !== null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId !== undefined && xDeviceId !== null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a user of your business, this user once registered will belong to the DEUNA Network.
         * @summary Register User
         * @param {UsersRegisterBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRegisterPost: async (body?: UsersRegisterBody, xApiKey?: string, xMerchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId !== undefined && xMerchantId !== null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @param {UsersRequestcodeBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRequestCodePost: async (body?: UsersRequestcodeBody, xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/request-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId !== undefined && xMerchantId !== null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId !== undefined && xDeviceId !== null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCardsUsersUserIdCardsCardIdDelete(userId: string, cardId: string, ?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).paymentsCardsUsersUserIdCardsCardIdDelete(userId, cardId, , options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCardsUsersUserIdCardsCardIdGet(userId: string, cardId: string, ?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).paymentsCardsUsersUserIdCardsCardIdGet(userId, cardId, , options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCardsUsersUserIdCardsGet(userId: string, ?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse2003>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).paymentsCardsUsersUserIdCardsGet(userId, , options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {UserIdCardsBody} [body] 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCardsUsersUserIdCardsPost(userId: string, body?: UserIdCardsBody, ?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).paymentsCardsUsersUserIdCardsPost(userId, body, , options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Login User
         * @summary Login User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginDeviceFingerprintPost(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, type?: string, loadProfileData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersLoginDeviceFingerprintPost(xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, type, loadProfileData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @param {UsersLoginBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [xRecaptchaToken] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginPost(body?: UsersLoginBody, xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, xRecaptchaToken?: string, type?: string, loadProfileData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2005>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersLoginPost(body, xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, xRecaptchaToken, type, loadProfileData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersMeGet(xApiKey, xMerchantId, xDeviceId, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Register a user of your business, this user once registered will belong to the DEUNA Network.
         * @summary Register User
         * @param {UsersRegisterBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRegisterPost(body?: UsersRegisterBody, xApiKey?: string, xMerchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2008>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersRegisterPost(body, xApiKey, xMerchantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @param {UsersRequestcodeBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRequestCodePost(body?: UsersRequestcodeBody, xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).usersRequestCodePost(body, xApiKey, xMerchantId, xDeviceId, authorization, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCardsUsersUserIdCardsCardIdDelete(userId: string, cardId: string, ?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UsersApiFp(configuration).paymentsCardsUsersUserIdCardsCardIdDelete(userId, cardId, , options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCardsUsersUserIdCardsCardIdGet(userId: string, cardId: string, ?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return UsersApiFp(configuration).paymentsCardsUsersUserIdCardsCardIdGet(userId, cardId, , options).then((request) => request(axios, basePath));
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCardsUsersUserIdCardsGet(userId: string, ?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse2003>>> {
            return UsersApiFp(configuration).paymentsCardsUsersUserIdCardsGet(userId, , options).then((request) => request(axios, basePath));
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {UserIdCardsBody} [body] 
         * @param {string} [] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCardsUsersUserIdCardsPost(userId: string, body?: UserIdCardsBody, ?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return UsersApiFp(configuration).paymentsCardsUsersUserIdCardsPost(userId, body, , options).then((request) => request(axios, basePath));
        },
        /**
         * Login User
         * @summary Login User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginDeviceFingerprintPost(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, type?: string, loadProfileData?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return UsersApiFp(configuration).usersLoginDeviceFingerprintPost(xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, type, loadProfileData, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @param {UsersLoginBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [xRecaptchaToken] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginPost(body?: UsersLoginBody, xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, xRecaptchaToken?: string, type?: string, loadProfileData?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2005>> {
            return UsersApiFp(configuration).usersLoginPost(body, xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, xRecaptchaToken, type, loadProfileData, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return UsersApiFp(configuration).usersMeGet(xApiKey, xMerchantId, xDeviceId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a user of your business, this user once registered will belong to the DEUNA Network.
         * @summary Register User
         * @param {UsersRegisterBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRegisterPost(body?: UsersRegisterBody, xApiKey?: string, xMerchantId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2008>> {
            return UsersApiFp(configuration).usersRegisterPost(body, xApiKey, xMerchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
         * @param {UsersRequestcodeBody} [body] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRequestCodePost(body?: UsersRequestcodeBody, xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, type?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UsersApiFp(configuration).usersRequestCodePost(body, xApiKey, xMerchantId, xDeviceId, authorization, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Get all user cards
     * @summary Get all user cards
     * @param {string} userId 
     * @param {string} cardId 
     * @param {string} [] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async paymentsCardsUsersUserIdCardsCardIdDelete(userId: string, cardId: string, ?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UsersApiFp(this.configuration).paymentsCardsUsersUserIdCardsCardIdDelete(userId, cardId, , options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Obtain a card by its identifier.
     * @summary Obtain a card by its identifier.
     * @param {string} userId 
     * @param {string} cardId 
     * @param {string} [] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async paymentsCardsUsersUserIdCardsCardIdGet(userId: string, cardId: string, ?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return UsersApiFp(this.configuration).paymentsCardsUsersUserIdCardsCardIdGet(userId, cardId, , options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all user cards
     * @summary Get all user cards
     * @param {string} userId 
     * @param {string} [] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async paymentsCardsUsersUserIdCardsGet(userId: string, ?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse2003>>> {
        return UsersApiFp(this.configuration).paymentsCardsUsersUserIdCardsGet(userId, , options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all user cards
     * @summary Get all user cards
     * @param {string} userId 
     * @param {UserIdCardsBody} [body] 
     * @param {string} [] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async paymentsCardsUsersUserIdCardsPost(userId: string, body?: UserIdCardsBody, ?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return UsersApiFp(this.configuration).paymentsCardsUsersUserIdCardsPost(userId, body, , options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Login User
     * @summary Login User
     * @param {string} [xApiKey] 
     * @param {string} [xMerchantId] 
     * @param {string} [xDeviceId] 
     * @param {string} [xSessionID] 
     * @param {string} [authorization] 
     * @param {string} [type] 
     * @param {string} [loadProfileData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersLoginDeviceFingerprintPost(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, type?: string, loadProfileData?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return UsersApiFp(this.configuration).usersLoginDeviceFingerprintPost(xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, type, loadProfileData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
     * @summary Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
     * @param {UsersLoginBody} [body] 
     * @param {string} [xApiKey] 
     * @param {string} [xMerchantId] 
     * @param {string} [xDeviceId] 
     * @param {string} [xSessionID] 
     * @param {string} [authorization] 
     * @param {string} [xRecaptchaToken] 
     * @param {string} [type] 
     * @param {string} [loadProfileData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersLoginPost(body?: UsersLoginBody, xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, xRecaptchaToken?: string, type?: string, loadProfileData?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2005>> {
        return UsersApiFp(this.configuration).usersLoginPost(body, xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, xRecaptchaToken, type, loadProfileData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get User Information
     * @summary Get User Information
     * @param {string} [xApiKey] 
     * @param {string} [xMerchantId] 
     * @param {string} [xDeviceId] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersMeGet(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return UsersApiFp(this.configuration).usersMeGet(xApiKey, xMerchantId, xDeviceId, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Register a user of your business, this user once registered will belong to the DEUNA Network.
     * @summary Register User
     * @param {UsersRegisterBody} [body] 
     * @param {string} [xApiKey] 
     * @param {string} [xMerchantId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersRegisterPost(body?: UsersRegisterBody, xApiKey?: string, xMerchantId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2008>> {
        return UsersApiFp(this.configuration).usersRegisterPost(body, xApiKey, xMerchantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
     * @summary Allows logging in with the OTP code sent to the user's email or phone. This must be specified in the query param.
     * @param {UsersRequestcodeBody} [body] 
     * @param {string} [xApiKey] 
     * @param {string} [xMerchantId] 
     * @param {string} [xDeviceId] 
     * @param {string} [authorization] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async usersRequestCodePost(body?: UsersRequestcodeBody, xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, type?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UsersApiFp(this.configuration).usersRequestCodePost(body, xApiKey, xMerchantId, xDeviceId, authorization, type, options).then((request) => request(this.axios, this.basePath));
    }
}
