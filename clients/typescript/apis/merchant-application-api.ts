/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * API Gateway
 *
 * OpenAPI spec version: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { MerchantIdApplicationsBody } from '../models';
/**
 * MerchantApplicationApi - axios parameter creator
 * @export
 */
export const MerchantApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validate application
         * @summary Validate Application
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsApplicationsValidateGet: async (xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/applications/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Api-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get application by ID
         * @summary Get Application
         * @param {string} merchantId 
         * @param {string} applicationId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsApplicationIdGet: async (merchantId: string, applicationId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            if (merchantId === null || merchantId === undefined) {
                throw new RequiredError('merchantId','Required parameter merchantId was null or undefined when calling merchantsMerchantIdApplicationsApplicationIdGet.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling merchantsMerchantIdApplicationsApplicationIdGet.');
            }
            const localVarPath = `/merchants/{merchant_id}/applications/{application_id}`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)))
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get applications of merchant
         * @summary Get Applications
         * @param {string} merchantId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsGet: async (merchantId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            if (merchantId === null || merchantId === undefined) {
                throw new RequiredError('merchantId','Required parameter merchantId was null or undefined when calling merchantsMerchantIdApplicationsGet.');
            }
            const localVarPath = `/merchants/{merchant_id}/applications`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create application
         * @summary Create Application
         * @param {string} merchantId 
         * @param {MerchantIdApplicationsBody} [body] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsMerchantIdApplicationsPost: async (merchantId: string, body?: MerchantIdApplicationsBody, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            if (merchantId === null || merchantId === undefined) {
                throw new RequiredError('merchantId','Required parameter merchantId was null or undefined when calling merchantsMerchantIdApplicationsPost.');
            }
            const localVarPath = `/merchants/{merchant_id}/applications`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantApplicationApi - functional programming interface
 * @export
 */
export const MerchantApplicationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Validate application
         * @summary Validate Application
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsApplicationsValidateGet(xApiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await MerchantApplicationApiAxiosParamCreator(configuration).merchantsApplicationsValidateGet(xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get application by ID
         * @summary Get Application
         * @param {string} merchantId 
         * @param {string} applicationId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsApplicationIdGet(merchantId: string, applicationId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await MerchantApplicationApiAxiosParamCreator(configuration).merchantsMerchantIdApplicationsApplicationIdGet(merchantId, applicationId, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get applications of merchant
         * @summary Get Applications
         * @param {string} merchantId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsGet(merchantId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await MerchantApplicationApiAxiosParamCreator(configuration).merchantsMerchantIdApplicationsGet(merchantId, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create application
         * @summary Create Application
         * @param {string} merchantId 
         * @param {MerchantIdApplicationsBody} [body] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsPost(merchantId: string, body?: MerchantIdApplicationsBody, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await MerchantApplicationApiAxiosParamCreator(configuration).merchantsMerchantIdApplicationsPost(merchantId, body, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MerchantApplicationApi - factory interface
 * @export
 */
export const MerchantApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Validate application
         * @summary Validate Application
         * @param {string} [xApiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsApplicationsValidateGet(xApiKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return MerchantApplicationApiFp(configuration).merchantsApplicationsValidateGet(xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get application by ID
         * @summary Get Application
         * @param {string} merchantId 
         * @param {string} applicationId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsApplicationIdGet(merchantId: string, applicationId: string, authorization?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return MerchantApplicationApiFp(configuration).merchantsMerchantIdApplicationsApplicationIdGet(merchantId, applicationId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get applications of merchant
         * @summary Get Applications
         * @param {string} merchantId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsGet(merchantId: string, authorization?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return MerchantApplicationApiFp(configuration).merchantsMerchantIdApplicationsGet(merchantId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Create application
         * @summary Create Application
         * @param {string} merchantId 
         * @param {MerchantIdApplicationsBody} [body] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantsMerchantIdApplicationsPost(merchantId: string, body?: MerchantIdApplicationsBody, authorization?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return MerchantApplicationApiFp(configuration).merchantsMerchantIdApplicationsPost(merchantId, body, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MerchantApplicationApi - object-oriented interface
 * @export
 * @class MerchantApplicationApi
 * @extends {BaseAPI}
 */
export class MerchantApplicationApi extends BaseAPI {
    /**
     * Validate application
     * @summary Validate Application
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApi
     */
    public async merchantsApplicationsValidateGet(xApiKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return MerchantApplicationApiFp(this.configuration).merchantsApplicationsValidateGet(xApiKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get application by ID
     * @summary Get Application
     * @param {string} merchantId 
     * @param {string} applicationId 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApi
     */
    public async merchantsMerchantIdApplicationsApplicationIdGet(merchantId: string, applicationId: string, authorization?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return MerchantApplicationApiFp(this.configuration).merchantsMerchantIdApplicationsApplicationIdGet(merchantId, applicationId, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get applications of merchant
     * @summary Get Applications
     * @param {string} merchantId 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApi
     */
    public async merchantsMerchantIdApplicationsGet(merchantId: string, authorization?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return MerchantApplicationApiFp(this.configuration).merchantsMerchantIdApplicationsGet(merchantId, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create application
     * @summary Create Application
     * @param {string} merchantId 
     * @param {MerchantIdApplicationsBody} [body] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApplicationApi
     */
    public async merchantsMerchantIdApplicationsPost(merchantId: string, body?: MerchantIdApplicationsBody, authorization?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return MerchantApplicationApiFp(this.configuration).merchantsMerchantIdApplicationsPost(merchantId, body, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
