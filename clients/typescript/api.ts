/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * API Gateway
 *
 * The version of the OpenAPI document: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetUserInformation200Response
 */
export interface GetUserInformation200Response {
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200Response
     */
    'created_at'?: string;
    /**
     * 
     * @type {any}
     * @memberof GetUserInformation200Response
     */
    'deleted_at'?: any;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200Response
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200Response
     */
    'id'?: string;
    /**
     * 
     * @type {Set<GetUserInformation200ResponseIdentityProvidersInner>}
     * @memberof GetUserInformation200Response
     */
    'identity_providers'?: Set<GetUserInformation200ResponseIdentityProvidersInner>;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserInformation200Response
     */
    'is_guest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserInformation200Response
     */
    'is_phone_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200Response
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200Response
     */
    'merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200Response
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200Response
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface GetUserInformation200ResponseIdentityProvidersInner
 */
export interface GetUserInformation200ResponseIdentityProvidersInner {
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200ResponseIdentityProvidersInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {any}
     * @memberof GetUserInformation200ResponseIdentityProvidersInner
     */
    'deleted_at'?: any;
    /**
     * 
     * @type {number}
     * @memberof GetUserInformation200ResponseIdentityProvidersInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200ResponseIdentityProvidersInner
     */
    'provider_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserInformation200ResponseIdentityProvidersInner
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
    /**
     * 
     * @type {string}
     * @memberof Login200Response
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface Login403Response
 */
export interface Login403Response {
    /**
     * 
     * @type {string}
     * @memberof Login403Response
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login403Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'otp'?: string;
}
/**
 * 
 * @export
 * @interface Purchase200Response
 */
export interface Purchase200Response {
    /**
     * 
     * @type {Purchase200ResponseOrder}
     * @memberof Purchase200Response
     */
    'order'?: Purchase200ResponseOrder;
}
/**
 * 
 * @export
 * @interface Purchase200ResponseOrder
 */
export interface Purchase200ResponseOrder {
    /**
     * 
     * @type {Array<Purchase200ResponseOrderBillingAddressInner>}
     * @memberof Purchase200ResponseOrder
     */
    'billing_address'?: Array<Purchase200ResponseOrderBillingAddressInner>;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'cash_change'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_items_total_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_shipping_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_shipping_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_sub_total'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_total_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_total_discount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_total_tax_amount'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'gift_card'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'include_payment_options'?: Array<any>;
    /**
     * 
     * @type {Array<Purchase200ResponseOrderItemsInner>}
     * @memberof Purchase200ResponseOrder
     */
    'items'?: Array<Purchase200ResponseOrderItemsInner>;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'items_total_amount'?: number;
    /**
     * 
     * @type {object}
     * @memberof Purchase200ResponseOrder
     */
    'metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'order_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'payment_link'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'redirect_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'scheduled_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'shipping'?: string;
    /**
     * 
     * @type {Array<Purchase200ResponseOrderShippingAddressInner>}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_address'?: Array<Purchase200ResponseOrderShippingAddressInner>;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_method'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_methods'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_options'?: Array<any>;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'store_code'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'sub_total'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'timezone'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'total_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'total_discount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'total_tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'user_instructions'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'webhook_urls'?: string;
}
/**
 * 
 * @export
 * @interface Purchase200ResponseOrderBillingAddressInner
 */
export interface Purchase200ResponseOrderBillingAddressInner {
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'first_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'identity_document'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'last_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'lng'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'zipcode'?: string;
}
/**
 * 
 * @export
 * @interface Purchase200ResponseOrderItemsInner
 */
export interface Purchase200ResponseOrderItemsInner {
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'details_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'image_url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'included_in_subscription'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'isbn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'manufacturer'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'options'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {Purchase200ResponseOrderItemsInnerTaxAmount}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'tax_amount'?: Purchase200ResponseOrderItemsInnerTaxAmount;
    /**
     * 
     * @type {boolean}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'taxable'?: boolean;
    /**
     * 
     * @type {Purchase200ResponseOrderItemsInnerTotalAmount}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'total_amount'?: Purchase200ResponseOrderItemsInnerTotalAmount;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'type'?: string;
    /**
     * 
     * @type {Purchase200ResponseOrderItemsInnerTaxAmount}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'unit_price'?: Purchase200ResponseOrderItemsInnerTaxAmount;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'uom'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'upc'?: string;
    /**
     * 
     * @type {Purchase200ResponseOrderItemsInnerWeight}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'weight'?: Purchase200ResponseOrderItemsInnerWeight;
}
/**
 * 
 * @export
 * @interface Purchase200ResponseOrderItemsInnerTaxAmount
 */
export interface Purchase200ResponseOrderItemsInnerTaxAmount {
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderItemsInnerTaxAmount
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerTaxAmount
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerTaxAmount
     */
    'currency_symbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerTaxAmount
     */
    'display_amount'?: string;
}
/**
 * 
 * @export
 * @interface Purchase200ResponseOrderItemsInnerTotalAmount
 */
export interface Purchase200ResponseOrderItemsInnerTotalAmount {
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderItemsInnerTotalAmount
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerTotalAmount
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerTotalAmount
     */
    'currency_symbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerTotalAmount
     */
    'display_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerTotalAmount
     */
    'display_original_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerTotalAmount
     */
    'display_total_discount'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderItemsInnerTotalAmount
     */
    'original_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderItemsInnerTotalAmount
     */
    'total_discount'?: number;
}
/**
 * 
 * @export
 * @interface Purchase200ResponseOrderItemsInnerWeight
 */
export interface Purchase200ResponseOrderItemsInnerWeight {
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInnerWeight
     */
    'unit'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderItemsInnerWeight
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface Purchase200ResponseOrderShippingAddressInner
 */
export interface Purchase200ResponseOrderShippingAddressInner {
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'first_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'identity_document'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'last_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'lng'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'zipcode'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseRequest
 */
export interface PurchaseRequest {
    /**
     * 
     * @type {PurchaseRequestBillingAddress}
     * @memberof PurchaseRequest
     */
    'billing_address'?: PurchaseRequestBillingAddress;
    /**
     * 
     * @type {PurchaseRequestBrowserDetails}
     * @memberof PurchaseRequest
     */
    'browser_details'?: PurchaseRequestBrowserDetails;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'captcha_token'?: string;
    /**
     * 
     * @type {PurchaseRequestCreditCard}
     * @memberof PurchaseRequest
     */
    'credit_card'?: PurchaseRequestCreditCard;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'device_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof PurchaseRequest
     */
    'installments'?: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'method_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'processor_name': string;
    /**
     * 
     * @type {PurchaseRequestShippingAddress}
     * @memberof PurchaseRequest
     */
    'shipping_address'?: PurchaseRequestShippingAddress;
    /**
     * 
     * @type {PurchaseRequestSpecificFields}
     * @memberof PurchaseRequest
     */
    'specific_fields'?: PurchaseRequestSpecificFields;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'store_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface PurchaseRequestBillingAddress
 */
export interface PurchaseRequestBillingAddress {
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'identity_document'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'is_default'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'lat'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'lng'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'zipcode'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseRequestBrowserDetails
 */
export interface PurchaseRequestBrowserDetails {
    /**
     * 
     * @type {number}
     * @memberof PurchaseRequestBrowserDetails
     */
    'screen_height'?: number;
    /**
     * 
     * @type {number}
     * @memberof PurchaseRequestBrowserDetails
     */
    'screen_width'?: number;
}
/**
 * 
 * @export
 * @interface PurchaseRequestCreditCard
 */
export interface PurchaseRequestCreditCard {
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'card_cvv'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'card_holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'card_holder_dni'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'card_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'expiry_month'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'expiry_year'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'installments'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'zip'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseRequestShippingAddress
 */
export interface PurchaseRequestShippingAddress {
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'identity_document'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'is_default'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'lat'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'lng'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'zipcode'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseRequestSpecificFields
 */
export interface PurchaseRequestSpecificFields {
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestSpecificFields
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestSpecificFields
     */
    'financial_institution'?: string;
}
/**
 * 
 * @export
 * @interface UsersLoginDeviceFingerprintPost200Response
 */
export interface UsersLoginDeviceFingerprintPost200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersLoginDeviceFingerprintPost200Response
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersLoginDeviceFingerprintPost200Response
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersLoginDeviceFingerprintPost200Response
     */
    'user-deuna'?: boolean;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsCardIdGet200Response
 */
export interface UsersUserIdCardsCardIdGet200Response {
    /**
     * 
     * @type {UsersUserIdCardsCardIdGet200ResponseData}
     * @memberof UsersUserIdCardsCardIdGet200Response
     */
    'data'?: UsersUserIdCardsCardIdGet200ResponseData;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsCardIdGet200ResponseData
 */
export interface UsersUserIdCardsCardIdGet200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'card_holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'card_holder_dni'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'first_six'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'is_valid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'last_four'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'verified_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsCardIdGet200ResponseData
     */
    'verified_by'?: string;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsGet200Response
 */
export interface UsersUserIdCardsGet200Response {
    /**
     * 
     * @type {Array<UsersUserIdCardsGet200ResponseDataInner>}
     * @memberof UsersUserIdCardsGet200Response
     */
    'data'?: Array<UsersUserIdCardsGet200ResponseDataInner>;
}
/**
 * 
 * @export
 * @interface UsersUserIdCardsGet200ResponseDataInner
 */
export interface UsersUserIdCardsGet200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'card_holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'card_holder_dni'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'expiration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'first_six'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'is_valid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'last_four'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'verified_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersUserIdCardsGet200ResponseDataInner
     */
    'verified_by'?: string;
}

/**
 * MerchantsApi - axios parameter creator
 * @export
 */
export const MerchantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Make the payment of the order.
         * @summary Make the payment of the order.
         * @param {string} [authorization] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantID] 
         * @param {string} [xStoreCode] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionId] 
         * @param {string} [userAgent] 
         * @param {PurchaseRequest} [purchaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchase: async (authorization?: string, xApiKey?: string, xMerchantID?: string, xStoreCode?: string, xDeviceId?: string, xSessionId?: string, userAgent?: string, purchaseRequest?: PurchaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/transactions/purchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantID != null) {
                localVarHeaderParameter['X-Merchant-ID'] = String(xMerchantID);
            }

            if (xStoreCode != null) {
                localVarHeaderParameter['X-Store-Code'] = String(xStoreCode);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (xSessionId != null) {
                localVarHeaderParameter['X-Session-Id'] = String(xSessionId);
            }

            if (userAgent != null) {
                localVarHeaderParameter['User-Agent'] = String(userAgent);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantsApi - functional programming interface
 * @export
 */
export const MerchantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(configuration)
    return {
        /**
         * Make the payment of the order.
         * @summary Make the payment of the order.
         * @param {string} [authorization] 
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantID] 
         * @param {string} [xStoreCode] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionId] 
         * @param {string} [userAgent] 
         * @param {PurchaseRequest} [purchaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchase(authorization?: string, xApiKey?: string, xMerchantID?: string, xStoreCode?: string, xDeviceId?: string, xSessionId?: string, userAgent?: string, purchaseRequest?: PurchaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Purchase200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchase(authorization, xApiKey, xMerchantID, xStoreCode, xDeviceId, xSessionId, userAgent, purchaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantsApi - factory interface
 * @export
 */
export const MerchantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantsApiFp(configuration)
    return {
        /**
         * Make the payment of the order.
         * @summary Make the payment of the order.
         * @param {MerchantsApiPurchaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchase(requestParameters: MerchantsApiPurchaseRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Purchase200Response> {
            return localVarFp.purchase(requestParameters.authorization, requestParameters.xApiKey, requestParameters.xMerchantID, requestParameters.xStoreCode, requestParameters.xDeviceId, requestParameters.xSessionId, requestParameters.userAgent, requestParameters.purchaseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for purchase operation in MerchantsApi.
 * @export
 * @interface MerchantsApiPurchaseRequest
 */
export interface MerchantsApiPurchaseRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantsApiPurchase
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof MerchantsApiPurchase
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof MerchantsApiPurchase
     */
    readonly xMerchantID?: string

    /**
     * 
     * @type {string}
     * @memberof MerchantsApiPurchase
     */
    readonly xStoreCode?: string

    /**
     * 
     * @type {string}
     * @memberof MerchantsApiPurchase
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof MerchantsApiPurchase
     */
    readonly xSessionId?: string

    /**
     * 
     * @type {string}
     * @memberof MerchantsApiPurchase
     */
    readonly userAgent?: string

    /**
     * 
     * @type {PurchaseRequest}
     * @memberof MerchantsApiPurchase
     */
    readonly purchaseRequest?: PurchaseRequest
}

/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
export class MerchantsApi extends BaseAPI {
    /**
     * Make the payment of the order.
     * @summary Make the payment of the order.
     * @param {MerchantsApiPurchaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public purchase(requestParameters: MerchantsApiPurchaseRequest = {}, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).purchase(requestParameters.authorization, requestParameters.xApiKey, requestParameters.xMerchantID, requestParameters.xStoreCode, requestParameters.xDeviceId, requestParameters.xSessionId, requestParameters.userAgent, requestParameters.purchaseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove card by identifier
         * @summary Remove card by identifier
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCardById: async (userId: string, cardId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserCardById', 'userId', userId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteUserCardById', 'cardId', cardId)
            const localVarPath = `/users/{user_id}/cards/{card_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInformation: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [xRecaptchaToken] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, xRecaptchaToken?: string, type?: string, loadProfileData?: string, loginRequest?: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (loadProfileData !== undefined) {
                localVarQueryParameter['load_profile_data'] = loadProfileData;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (xSessionID != null) {
                localVarHeaderParameter['X-Session-ID'] = String(xSessionID);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xRecaptchaToken != null) {
                localVarHeaderParameter['X-Recaptcha-Token'] = String(xRecaptchaToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login User
         * @summary Login User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginDeviceFingerprintPost: async (xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, type?: string, loadProfileData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login/device-fingerprint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (loadProfileData !== undefined) {
                localVarQueryParameter['load_profile_data'] = loadProfileData;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            if (xMerchantId != null) {
                localVarHeaderParameter['X-Merchant-Id'] = String(xMerchantId);
            }

            if (xDeviceId != null) {
                localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
            }

            if (xSessionID != null) {
                localVarHeaderParameter['X-Session-ID'] = String(xSessionID);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsCardIdGet: async (userId: string, cardId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdCardsCardIdGet', 'userId', userId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('usersUserIdCardsCardIdGet', 'cardId', cardId)
            const localVarPath = `/users/{user_id}/cards/{card_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} [authorization] 
         * @param {string} [xMerchantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsGet: async (userId: string, authorization?: string, xMerchantID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdCardsGet', 'userId', userId)
            const localVarPath = `/users/{user_id}/cards`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication X-Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xMerchantID != null) {
                localVarHeaderParameter['X-Merchant-ID'] = String(xMerchantID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove card by identifier
         * @summary Remove card by identifier
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserCardById(userId: string, cardId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserCardById(userId, cardId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInformation(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserInformation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInformation(xApiKey, xMerchantId, xDeviceId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [xRecaptchaToken] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, xRecaptchaToken?: string, type?: string, loadProfileData?: string, loginRequest?: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, xRecaptchaToken, type, loadProfileData, loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Login User
         * @summary Login User
         * @param {string} [xApiKey] 
         * @param {string} [xMerchantId] 
         * @param {string} [xDeviceId] 
         * @param {string} [xSessionID] 
         * @param {string} [authorization] 
         * @param {string} [type] 
         * @param {string} [loadProfileData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginDeviceFingerprintPost(xApiKey?: string, xMerchantId?: string, xDeviceId?: string, xSessionID?: string, authorization?: string, type?: string, loadProfileData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersLoginDeviceFingerprintPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLoginDeviceFingerprintPost(xApiKey, xMerchantId, xDeviceId, xSessionID, authorization, type, loadProfileData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {string} userId 
         * @param {string} cardId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdCardsCardIdGet(userId: string, cardId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUserIdCardsCardIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdCardsCardIdGet(userId, cardId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {string} userId 
         * @param {string} [authorization] 
         * @param {string} [xMerchantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdCardsGet(userId: string, authorization?: string, xMerchantID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUserIdCardsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdCardsGet(userId, authorization, xMerchantID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Remove card by identifier
         * @summary Remove card by identifier
         * @param {UsersApiDeleteUserCardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserCardById(requestParameters: UsersApiDeleteUserCardByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserCardById(requestParameters.userId, requestParameters.cardId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User Information
         * @summary Get User Information
         * @param {UsersApiGetUserInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInformation(requestParameters: UsersApiGetUserInformationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetUserInformation200Response> {
            return localVarFp.getUserInformation(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
         * @param {UsersApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: UsersApiLoginRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Login200Response> {
            return localVarFp.login(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.xSessionID, requestParameters.authorization, requestParameters.xRecaptchaToken, requestParameters.type, requestParameters.loadProfileData, requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Login User
         * @summary Login User
         * @param {UsersApiUsersLoginDeviceFingerprintPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginDeviceFingerprintPost(requestParameters: UsersApiUsersLoginDeviceFingerprintPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UsersLoginDeviceFingerprintPost200Response> {
            return localVarFp.usersLoginDeviceFingerprintPost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.xSessionID, requestParameters.authorization, requestParameters.type, requestParameters.loadProfileData, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain a card by its identifier.
         * @summary Obtain a card by its identifier.
         * @param {UsersApiUsersUserIdCardsCardIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsCardIdGet(requestParameters: UsersApiUsersUserIdCardsCardIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersUserIdCardsCardIdGet200Response> {
            return localVarFp.usersUserIdCardsCardIdGet(requestParameters.userId, requestParameters.cardId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all user cards
         * @summary Get all user cards
         * @param {UsersApiUsersUserIdCardsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCardsGet(requestParameters: UsersApiUsersUserIdCardsGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersUserIdCardsGet200Response> {
            return localVarFp.usersUserIdCardsGet(requestParameters.userId, requestParameters.authorization, requestParameters.xMerchantID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUserCardById operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserCardByIdRequest
 */
export interface UsersApiDeleteUserCardByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiDeleteUserCardById
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiDeleteUserCardById
     */
    readonly cardId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiDeleteUserCardById
     */
    readonly authorization?: string
}

/**
 * Request parameters for getUserInformation operation in UsersApi.
 * @export
 * @interface UsersApiGetUserInformationRequest
 */
export interface UsersApiGetUserInformationRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserInformation
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserInformation
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserInformation
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserInformation
     */
    readonly authorization?: string
}

/**
 * Request parameters for login operation in UsersApi.
 * @export
 * @interface UsersApiLoginRequest
 */
export interface UsersApiLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiLogin
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiLogin
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiLogin
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiLogin
     */
    readonly xSessionID?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiLogin
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiLogin
     */
    readonly xRecaptchaToken?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiLogin
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiLogin
     */
    readonly loadProfileData?: string

    /**
     * 
     * @type {LoginRequest}
     * @memberof UsersApiLogin
     */
    readonly loginRequest?: LoginRequest
}

/**
 * Request parameters for usersLoginDeviceFingerprintPost operation in UsersApi.
 * @export
 * @interface UsersApiUsersLoginDeviceFingerprintPostRequest
 */
export interface UsersApiUsersLoginDeviceFingerprintPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly xApiKey?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly xMerchantId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly xDeviceId?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly xSessionID?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersLoginDeviceFingerprintPost
     */
    readonly loadProfileData?: string
}

/**
 * Request parameters for usersUserIdCardsCardIdGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserIdCardsCardIdGetRequest
 */
export interface UsersApiUsersUserIdCardsCardIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdGet
     */
    readonly cardId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsCardIdGet
     */
    readonly authorization?: string
}

/**
 * Request parameters for usersUserIdCardsGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserIdCardsGetRequest
 */
export interface UsersApiUsersUserIdCardsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsGet
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsGet
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserIdCardsGet
     */
    readonly xMerchantID?: string
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Remove card by identifier
     * @summary Remove card by identifier
     * @param {UsersApiDeleteUserCardByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUserCardById(requestParameters: UsersApiDeleteUserCardByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUserCardById(requestParameters.userId, requestParameters.cardId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get User Information
     * @summary Get User Information
     * @param {UsersApiGetUserInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserInformation(requestParameters: UsersApiGetUserInformationRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserInformation(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
     * @summary Allows logging in with the OTP code sent to the user\'s email or phone. This must be specified in the query param.
     * @param {UsersApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public login(requestParameters: UsersApiLoginRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).login(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.xSessionID, requestParameters.authorization, requestParameters.xRecaptchaToken, requestParameters.type, requestParameters.loadProfileData, requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login User
     * @summary Login User
     * @param {UsersApiUsersLoginDeviceFingerprintPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLoginDeviceFingerprintPost(requestParameters: UsersApiUsersLoginDeviceFingerprintPostRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLoginDeviceFingerprintPost(requestParameters.xApiKey, requestParameters.xMerchantId, requestParameters.xDeviceId, requestParameters.xSessionID, requestParameters.authorization, requestParameters.type, requestParameters.loadProfileData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain a card by its identifier.
     * @summary Obtain a card by its identifier.
     * @param {UsersApiUsersUserIdCardsCardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdCardsCardIdGet(requestParameters: UsersApiUsersUserIdCardsCardIdGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdCardsCardIdGet(requestParameters.userId, requestParameters.cardId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all user cards
     * @summary Get all user cards
     * @param {UsersApiUsersUserIdCardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdCardsGet(requestParameters: UsersApiUsersUserIdCardsGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdCardsGet(requestParameters.userId, requestParameters.authorization, requestParameters.xMerchantID, options).then((request) => request(this.axios, this.basePath));
    }
}


