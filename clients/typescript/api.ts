/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * API Gateway
 *
 * The version of the OpenAPI document: 1.0
 * Contact: checkout@deuna.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


    import type { Configuration } from './configuration';
    import type { AxiosPromise, AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
    import globalAxios from 'axios';
    // Some imports not used depending on template conditions
    // @ts-ignore
    import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
    import type { RequestArgs } from './base';
    // @ts-ignore
    import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';



    class DeUnaApi extends BaseAPI {
        tokenStateToken = this.useStateToken(null);
        tokenStateUserId = this.useStateUserId(null);

        useStateToken(initialValue: any) {
            let state = initialValue;

            function getValue() {
                return state;
            }

            function setValue(newValue: any) {
                state = newValue;
            }

            function exists() {
                return state !== undefined && state !== null;
            }

            return {
                get: getValue,
                set: setValue,
                exists: exists,
            };
        }

        useStateUserId(initialValue: any) {
            let state = initialValue;

            function getValue() {
                return state;
            }

            function setValue(newValue: any) {
                state = newValue;
            }

            function exists() {
                return state !== undefined && state !== null;
            }

            return {
                get: getValue,
                set: setValue,
                exists: exists,
            };
        }

        setToken(token: any) {
            if (!this.tokenStateToken.exists()) {
                this.tokenStateToken.set(token);
                this.configuration.accessToken = token;
            }
        }

        getToken() {
            return this.tokenStateToken.get();
        }

        setUserId(userId: any) {
            if (!this.tokenStateUserId.exists()) {
                this.tokenStateUserId.set(userId);
                this.configuration.userId = userId;
            }
        }

        getUserId() {
            return this.tokenStateUserId.get();
        }

        refreshConfiguration(config: Configuration) {

            if(this.tokenStateToken.exists()) {
            config.accessToken = this.tokenStateToken.get();
            }

            if(this.tokenStateUserId.exists()) {
                config.userId = this.tokenStateUserId.get();
            }
                return config;
            }
    }

    const customAPI = new DeUnaApi();

    const axiosInstance = globalAxios.create();

    axiosInstance.interceptors.response.use(response => {

        if (response.data && 'token' in response.data && response.data && 'refreshToken' in response.data) {
            const token = response.data.token;
            customAPI.setToken(token);
        }

        if(response.data && 'id' in response.data && response.data && 'email' in response.data) {
            const userId = response.data.id;
            customAPI.setUserId(userId);
        }
        return response;
    });


        /**
 * 
 * @export
 * @interface BinDetector200Response
 */
export interface BinDetector200Response {
    /**
     * 
     * @type {string}
     * @memberof BinDetector200Response
     */
    'bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof BinDetector200Response
     */
    'bin'?: string;
    /**
     * 
     * @type {string}
     * @memberof BinDetector200Response
     */
    'branch'?: string;
    /**
     * 
     * @type {string}
     * @memberof BinDetector200Response
     */
    'card_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof BinDetector200Response
     */
    'country'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BinDetector200Response
     */
    'country_iso'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BinDetector200Response
     */
    'currency'?: string;
}
        /**
 * 
 * @export
 * @interface BinDetector400Response
 */
export interface BinDetector400Response {
    /**
     * 
     * @type {string}
     * @memberof BinDetector400Response
     */
    'error'?: string;
}
        /**
 * 
 * @export
 * @interface Cancel400Response
 */
export interface Cancel400Response {
    /**
     * 
     * @type {string}
     * @memberof Cancel400Response
     */
    'data'?: string;
    /**
     * 
     * @type {GetOrder400ResponseError}
     * @memberof Cancel400Response
     */
    'error'?: GetOrder400ResponseError;
}
        /**
 * 
 * @export
 * @interface CancelRequest
 */
export interface CancelRequest {
    /**
     * 
     * @type {string}
     * @memberof CancelRequest
     */
    'reason'?: string;
}
        /**
 * 
 * @export
 * @interface CreateMerchant200Response
 */
export interface CreateMerchant200Response {
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateMerchant200Response
     */
    'managed_by_duna'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'privacy_policies_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'short_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'term_and_conditions_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'timezone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant200Response
     */
    'updated_at'?: string;
}
        /**
 * 
 * @export
 * @interface CreateMerchant400Response
 */
export interface CreateMerchant400Response {
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant400Response
     */
    'data'?: string;
    /**
     * 
     * @type {CreateMerchant400ResponseError}
     * @memberof CreateMerchant400Response
     */
    'error'?: CreateMerchant400ResponseError;
}
        /**
 * 
 * @export
 * @interface CreateMerchant400ResponseError
 */
export interface CreateMerchant400ResponseError {
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant400ResponseError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchant400ResponseError
     */
    'description'?: string;
}
        /**
 * 
 * @export
 * @interface CreateMerchantRequest
 */
export interface CreateMerchantRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantRequest
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantRequest
     */
    'currency'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateMerchantRequest
     */
    'managed_by_duna'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantRequest
     */
    'short_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantRequest
     */
    'timezone'?: string;
}
        /**
 * 
 * @export
 * @interface CreateMerchantStore200Response
 */
export interface CreateMerchantStore200Response {
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantStore200Response
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantStore200Response
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantStore200Response
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateMerchantStore200Response
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateMerchantStore200Response
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateMerchantStore200Response
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantStore200Response
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantStore200Response
     */
    'updated_at'?: string;
}
        /**
 * 
 * @export
 * @interface CreateMerchantStoreRequest
 */
export interface CreateMerchantStoreRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantStoreRequest
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateMerchantStoreRequest
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateMerchantStoreRequest
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantStoreRequest
     */
    'name'?: string;
}
        /**
 * 
 * @export
 * @interface CreatePublicKey201Response
 */
export interface CreatePublicKey201Response {
    /**
     * 
     * @type {string}
     * @memberof CreatePublicKey201Response
     */
    'data'?: string;
}
        /**
 * 
 * @export
 * @interface GetAllMerchants200Response
 */
export interface GetAllMerchants200Response {
    /**
     * 
     * @type {number}
     * @memberof GetAllMerchants200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<GetAllMerchants200ResponseDataInner>}
     * @memberof GetAllMerchants200Response
     */
    'data'?: Array<GetAllMerchants200ResponseDataInner>;
}
        /**
 * 
 * @export
 * @interface GetAllMerchants200ResponseDataInner
 */
export interface GetAllMerchants200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'DeletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'ID'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'account_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'amplitude_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'api_key'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'auto_approve_order_in_core'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'bank_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'business_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'domain'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'gtm_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'industry'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'logo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'managed_by_duna'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'merchant_category_code'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'merchant_events'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'onboarding_step'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'order_api_port'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'order_api_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'order_pickup_api_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'pickup_token_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'platform'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'policies'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'privacy_policies_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'service'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'short_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'status_changes_notification_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'storefront_base_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'storefront_private_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'term_and_conditions_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'timezone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'use_duna_send'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllMerchants200ResponseDataInner
     */
    'vendor_id'?: string;
}
        /**
 * 
 * @export
 * @interface GetApplications200Response
 */
export interface GetApplications200Response {
    /**
     * 
     * @type {Set<GetApplications200ResponseDataInner>}
     * @memberof GetApplications200Response
     */
    'data'?: Set<GetApplications200ResponseDataInner>;
}
        /**
 * 
 * @export
 * @interface GetApplications200ResponseDataInner
 */
export interface GetApplications200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetApplications200ResponseDataInner
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetApplications200ResponseDataInner
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof GetApplications200ResponseDataInner
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetApplications200ResponseDataInner
     */
    'is_sandbox': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetApplications200ResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetApplications200ResponseDataInner
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetApplications200ResponseDataInner
     */
    'updated_at': string;
}
        /**
 * 
 * @export
 * @interface GetMerchant200Response
 */
export interface GetMerchant200Response {
    /**
     * 
     * @type {IdentityToken200Response}
     * @memberof GetMerchant200Response
     */
    'data'?: IdentityToken200Response;
}
        /**
 * 
 * @export
 * @interface GetMerchantStores200Response
 */
export interface GetMerchantStores200Response {
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200Response
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200Response
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200Response
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200Response
     */
    'logo_url'?: string;
    /**
     * 
     * @type {Array<GetMerchantStores200ResponseStoresInner>}
     * @memberof GetMerchantStores200Response
     */
    'stores'?: Array<GetMerchantStores200ResponseStoresInner>;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200Response
     */
    'term_and_conditions_url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetMerchantStores200Response
     */
    'use_duna_send'?: boolean;
}
        /**
 * 
 * @export
 * @interface GetMerchantStores200ResponseStoresInner
 */
export interface GetMerchantStores200ResponseStoresInner {
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200ResponseStoresInner
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200ResponseStoresInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200ResponseStoresInner
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetMerchantStores200ResponseStoresInner
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetMerchantStores200ResponseStoresInner
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMerchantStores200ResponseStoresInner
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200ResponseStoresInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantStores200ResponseStoresInner
     */
    'updated_at'?: string;
}
        /**
 * 
 * @export
 * @interface GetMerchantToken200Response
 */
export interface GetMerchantToken200Response {
    /**
     * 
     * @type {string}
     * @memberof GetMerchantToken200Response
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMerchantToken200Response
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantToken200Response
     */
    'merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantToken200Response
     */
    'merchant_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMerchantToken200Response
     */
    'modules'?: Array<string>;
}
        /**
 * 
 * @export
 * @interface GetMerchantUsers200Response
 */
export interface GetMerchantUsers200Response {
    /**
     * 
     * @type {GetMerchantUsers200ResponseData}
     * @memberof GetMerchantUsers200Response
     */
    'data'?: GetMerchantUsers200ResponseData;
}
        /**
 * 
 * @export
 * @interface GetMerchantUsers200ResponseData
 */
export interface GetMerchantUsers200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'last_updated'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers200ResponseData
     */
    'store_code'?: string;
}
        /**
 * 
 * @export
 * @interface GetMerchantUsers400Response
 */
export interface GetMerchantUsers400Response {
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers400Response
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers400Response
     */
    'message'?: string;
}
        /**
 * 
 * @export
 * @interface GetMerchantUsers500Response
 */
export interface GetMerchantUsers500Response {
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers500Response
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsers500Response
     */
    'message'?: string;
}
        /**
 * 
 * @export
 * @interface GetMerchantUsersRequest
 */
export interface GetMerchantUsersRequest {
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsersRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsersRequest
     */
    'merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsersRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsersRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsersRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMerchantUsersRequest
     */
    'role'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200Response
 */
export interface GetOrder200Response {
    /**
     * 
     * @type {Array<object>}
     * @memberof GetOrder200Response
     */
    'checkout_modules'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetOrder200Response
     */
    'custom_fields'?: Array<object>;
    /**
     * 
     * @type {GetOrder200ResponseOrder}
     * @memberof GetOrder200Response
     */
    'order'?: GetOrder200ResponseOrder;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200Response
     */
    'order_type'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrder
 */
export interface GetOrder200ResponseOrder {
    /**
     * 
     * @type {GetOrder200ResponseOrderBillingAddress}
     * @memberof GetOrder200ResponseOrder
     */
    'billing_address'?: GetOrder200ResponseOrderBillingAddress;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'cash_change'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'currency'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetOrder200ResponseOrder
     */
    'discounts'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'display_items_total_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'display_shipping_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'display_shipping_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'display_sub_total'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'display_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'display_total_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'display_total_discount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'display_total_tax_amount'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetOrder200ResponseOrder
     */
    'gift_card'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetOrder200ResponseOrder
     */
    'include_payment_options'?: Array<object>;
    /**
     * 
     * @type {Array<GetOrder200ResponseOrderItemsInner>}
     * @memberof GetOrder200ResponseOrder
     */
    'items'?: Array<GetOrder200ResponseOrderItemsInner>;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'items_total_amount'?: number;
    /**
     * 
     * @type {TokenizeOrderRequestOrderMetadata}
     * @memberof GetOrder200ResponseOrder
     */
    'metadata'?: TokenizeOrderRequestOrderMetadata;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'order_id'?: string;
    /**
     * 
     * @type {GetOrder200ResponseOrderPayment}
     * @memberof GetOrder200ResponseOrder
     */
    'payment'?: GetOrder200ResponseOrderPayment;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'payment_link'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'redirect_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'scheduled_at'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShipping}
     * @memberof GetOrder200ResponseOrder
     */
    'shipping'?: TokenizeOrderRequestOrderShipping;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingAddress}
     * @memberof GetOrder200ResponseOrder
     */
    'shipping_address'?: TokenizeOrderRequestOrderShippingAddress;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'shipping_amount'?: number;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingMethod}
     * @memberof GetOrder200ResponseOrder
     */
    'shipping_method'?: TokenizeOrderRequestOrderShippingMethod;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetOrder200ResponseOrder
     */
    'shipping_methods'?: Array<object>;
    /**
     * 
     * @type {GetOrder200ResponseOrderShippingOptions}
     * @memberof GetOrder200ResponseOrder
     */
    'shipping_options'?: GetOrder200ResponseOrderShippingOptions;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'shipping_tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'store_code'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'sub_total'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'timezone'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'total_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'total_discount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrder
     */
    'total_tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrder
     */
    'user_instructions'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof GetOrder200ResponseOrder
     */
    'webhook_urls'?: Array<any>;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderBillingAddress
 */
export interface GetOrder200ResponseOrderBillingAddress {
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'first_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'identity_document'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'last_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'lng'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderBillingAddress
     */
    'zipcode'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderItemsInner
 */
export interface GetOrder200ResponseOrderItemsInner {
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'details_url'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'discounts'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'image_url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'included_in_subscription'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'isbn'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'manufacturer'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'options'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTaxAmount}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'tax_amount'?: TokenizeOrderRequestOrderItemsInnerTaxAmount;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'taxable'?: boolean;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTotalAmount}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'total_amount'?: TokenizeOrderRequestOrderItemsInnerTotalAmount;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'type'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTaxAmount}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'unit_price'?: TokenizeOrderRequestOrderItemsInnerTaxAmount;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'uom'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'upc'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerWeight}
     * @memberof GetOrder200ResponseOrderItemsInner
     */
    'weight'?: TokenizeOrderRequestOrderItemsInnerWeight;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderPayment
 */
export interface GetOrder200ResponseOrderPayment {
    /**
     * 
     * @type {GetOrder200ResponseOrderPaymentData}
     * @memberof GetOrder200ResponseOrderPayment
     */
    'data'?: GetOrder200ResponseOrderPaymentData;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderPaymentData
 */
export interface GetOrder200ResponseOrderPaymentData {
    /**
     * 
     * @type {GetOrder200ResponseOrderPaymentDataAmount}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'amount'?: GetOrder200ResponseOrderPaymentDataAmount;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'created_at'?: string;
    /**
     * 
     * @type {GetOrder200ResponseOrderPaymentDataCustomer}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'customer'?: GetOrder200ResponseOrderPaymentDataCustomer;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'external_transaction_id'?: string;
    /**
     * 
     * @type {GetOrder200ResponseOrderPaymentDataFromCard}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'from_card'?: GetOrder200ResponseOrderPaymentDataFromCard;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'id'?: string;
    /**
     * 
     * @type {GetOrder200ResponseOrderPaymentDataMerchant}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'merchant'?: GetOrder200ResponseOrderPaymentDataMerchant;
    /**
     * 
     * @type {object}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'method_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'processor'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentData
     */
    'updated_at'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderPaymentDataAmount
 */
export interface GetOrder200ResponseOrderPaymentDataAmount {
    /**
     * 
     * @type {number}
     * @memberof GetOrder200ResponseOrderPaymentDataAmount
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentDataAmount
     */
    'currency'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderPaymentDataCustomer
 */
export interface GetOrder200ResponseOrderPaymentDataCustomer {
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentDataCustomer
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentDataCustomer
     */
    'id'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderPaymentDataFromCard
 */
export interface GetOrder200ResponseOrderPaymentDataFromCard {
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentDataFromCard
     */
    'card_brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentDataFromCard
     */
    'first_six'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentDataFromCard
     */
    'last_four'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderPaymentDataMerchant
 */
export interface GetOrder200ResponseOrderPaymentDataMerchant {
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentDataMerchant
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderPaymentDataMerchant
     */
    'store_code'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderShippingOptions
 */
export interface GetOrder200ResponseOrderShippingOptions {
    /**
     * 
     * @type {GetOrder200ResponseOrderShippingOptionsDetails}
     * @memberof GetOrder200ResponseOrderShippingOptions
     */
    'details'?: GetOrder200ResponseOrderShippingOptionsDetails;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderShippingOptions
     */
    'type'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderShippingOptionsDetails
 */
export interface GetOrder200ResponseOrderShippingOptionsDetails {
    /**
     * 
     * @type {GetOrder200ResponseOrderShippingOptionsDetailsAdditionalDetails}
     * @memberof GetOrder200ResponseOrderShippingOptionsDetails
     */
    'additional_details'?: GetOrder200ResponseOrderShippingOptionsDetailsAdditionalDetails;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderShippingOptionsDetails
     */
    'address'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingOptionsDetailsAddressCoordinates}
     * @memberof GetOrder200ResponseOrderShippingOptionsDetails
     */
    'address_coordinates'?: TokenizeOrderRequestOrderShippingOptionsDetailsAddressCoordinates;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingOptionsDetailsContact}
     * @memberof GetOrder200ResponseOrderShippingOptionsDetails
     */
    'contact'?: TokenizeOrderRequestOrderShippingOptionsDetailsContact;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderShippingOptionsDetails
     */
    'store_name'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder200ResponseOrderShippingOptionsDetailsAdditionalDetails
 */
export interface GetOrder200ResponseOrderShippingOptionsDetailsAdditionalDetails {
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderShippingOptionsDetailsAdditionalDetails
     */
    'pickup_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder200ResponseOrderShippingOptionsDetailsAdditionalDetails
     */
    'stock_location'?: string;
}
        /**
 * 
 * @export
 * @interface GetOrder400Response
 */
export interface GetOrder400Response {
    /**
     * 
     * @type {object}
     * @memberof GetOrder400Response
     */
    'data'?: object;
    /**
     * 
     * @type {GetOrder400ResponseError}
     * @memberof GetOrder400Response
     */
    'error'?: GetOrder400ResponseError;
}
        /**
 * 
 * @export
 * @interface GetOrder400ResponseError
 */
export interface GetOrder400ResponseError {
    /**
     * 
     * @type {string}
     * @memberof GetOrder400ResponseError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrder400ResponseError
     */
    'description'?: string;
}
        /**
 * 
 * @export
 * @interface IdentityToken200Response
 */
export interface IdentityToken200Response {
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'DeletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'ID'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'account_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'amplitude_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'api_key'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityToken200Response
     */
    'auto_approve_order_in_core'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'bank_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'business_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'domain'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'gtm_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'industry'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'logo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityToken200Response
     */
    'managed_by_duna'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'merchant_category_code'?: string;
    /**
     * 
     * @type {Array<IdentityToken200ResponseMerchantEventsInner>}
     * @memberof IdentityToken200Response
     */
    'merchant_events'?: Array<IdentityToken200ResponseMerchantEventsInner>;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof IdentityToken200Response
     */
    'onboarding_step'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdentityToken200Response
     */
    'order_api_port'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'order_api_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'order_pickup_api_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'pickup_token_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'platform'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdentityToken200Response
     */
    'policies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'privacy_policies_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'service'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'short_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'status_changes_notification_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'storefront_base_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'storefront_private_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'term_and_conditions_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'timezone'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityToken200Response
     */
    'use_duna_send'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200Response
     */
    'vendor_id'?: string;
}
        /**
 * 
 * @export
 * @interface IdentityToken200ResponseMerchantEventsInner
 */
export interface IdentityToken200ResponseMerchantEventsInner {
    /**
     * 
     * @type {number}
     * @memberof IdentityToken200ResponseMerchantEventsInner
     */
    'ID'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200ResponseMerchantEventsInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200ResponseMerchantEventsInner
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200ResponseMerchantEventsInner
     */
    'event'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200ResponseMerchantEventsInner
     */
    'merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityToken200ResponseMerchantEventsInner
     */
    'updated_at'?: string;
}
        /**
 * 
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
    /**
     * 
     * @type {number}
     * @memberof Login200Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof Login200Response
     */
    'expire'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login200Response
     */
    'token'?: string;
}
        /**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
}
        /**
 * 
 * @export
 * @interface MerchantsMerchantIdApplicationsPost200Response
 */
export interface MerchantsMerchantIdApplicationsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'is_sandbox'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'private_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'public_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'signing_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPost200Response
     */
    'updated_at'?: string;
}
        /**
 * 
 * @export
 * @interface MerchantsMerchantIdApplicationsPostRequest
 */
export interface MerchantsMerchantIdApplicationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPostRequest
     */
    'expire_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsMerchantIdApplicationsPostRequest
     */
    'is_sandbox'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MerchantsMerchantIdApplicationsPostRequest
     */
    'name'?: string;
}
        /**
 * 
 * @export
 * @interface Purchase200Response
 */
export interface Purchase200Response {
    /**
     * 
     * @type {Purchase200ResponseOrder}
     * @memberof Purchase200Response
     */
    'order'?: Purchase200ResponseOrder;
}
        /**
 * 
 * @export
 * @interface Purchase200ResponseOrder
 */
export interface Purchase200ResponseOrder {
    /**
     * 
     * @type {Array<Purchase200ResponseOrderBillingAddressInner>}
     * @memberof Purchase200ResponseOrder
     */
    'billing_address'?: Array<Purchase200ResponseOrderBillingAddressInner>;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'cash_change'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_items_total_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_shipping_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_shipping_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_sub_total'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_total_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_total_discount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'display_total_tax_amount'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'gift_card'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'include_payment_options'?: Array<any>;
    /**
     * 
     * @type {Array<Purchase200ResponseOrderItemsInner>}
     * @memberof Purchase200ResponseOrder
     */
    'items'?: Array<Purchase200ResponseOrderItemsInner>;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'items_total_amount'?: number;
    /**
     * 
     * @type {object}
     * @memberof Purchase200ResponseOrder
     */
    'metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'order_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'payment_link'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'redirect_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'scheduled_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'shipping'?: string;
    /**
     * 
     * @type {Array<Purchase200ResponseOrderShippingAddressInner>}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_address'?: Array<Purchase200ResponseOrderShippingAddressInner>;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_method'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_methods'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_options'?: Array<any>;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'shipping_tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'store_code'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'sub_total'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'timezone'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'total_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'total_discount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrder
     */
    'total_tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrder
     */
    'user_instructions'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Purchase200ResponseOrder
     */
    'webhook_urls'?: Array<any>;
}
        /**
 * 
 * @export
 * @interface Purchase200ResponseOrderBillingAddressInner
 */
export interface Purchase200ResponseOrderBillingAddressInner {
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'first_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'identity_document'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'last_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'lng'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderBillingAddressInner
     */
    'zipcode'?: string;
}
        /**
 * 
 * @export
 * @interface Purchase200ResponseOrderItemsInner
 */
export interface Purchase200ResponseOrderItemsInner {
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'details_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'image_url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'included_in_subscription'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'isbn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'manufacturer'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'options'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'subscription_id'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTaxAmount}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'tax_amount'?: TokenizeOrderRequestOrderItemsInnerTaxAmount;
    /**
     * 
     * @type {boolean}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'taxable'?: boolean;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTotalAmount}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'total_amount'?: TokenizeOrderRequestOrderItemsInnerTotalAmount;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'type'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTaxAmount}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'unit_price'?: TokenizeOrderRequestOrderItemsInnerTaxAmount;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'uom'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'upc'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerWeight}
     * @memberof Purchase200ResponseOrderItemsInner
     */
    'weight'?: TokenizeOrderRequestOrderItemsInnerWeight;
}
        /**
 * 
 * @export
 * @interface Purchase200ResponseOrderShippingAddressInner
 */
export interface Purchase200ResponseOrderShippingAddressInner {
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'first_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'identity_document'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'last_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'lng'?: number;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Purchase200ResponseOrderShippingAddressInner
     */
    'zipcode'?: string;
}
        /**
 * 
 * @export
 * @interface PurchaseRequest
 */
export interface PurchaseRequest {
    /**
     * 
     * @type {PurchaseRequestBillingAddress}
     * @memberof PurchaseRequest
     */
    'billing_address'?: PurchaseRequestBillingAddress;
    /**
     * 
     * @type {PurchaseRequestBrowserDetails}
     * @memberof PurchaseRequest
     */
    'browser_details'?: PurchaseRequestBrowserDetails;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'captcha_token'?: string;
    /**
     * 
     * @type {PurchaseRequestCreditCard}
     * @memberof PurchaseRequest
     */
    'credit_card'?: PurchaseRequestCreditCard;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'device_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof PurchaseRequest
     */
    'installments'?: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'method_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'processor_name': string;
    /**
     * 
     * @type {PurchaseRequestShippingAddress}
     * @memberof PurchaseRequest
     */
    'shipping_address'?: PurchaseRequestShippingAddress;
    /**
     * 
     * @type {PurchaseRequestSpecificFields}
     * @memberof PurchaseRequest
     */
    'specific_fields'?: PurchaseRequestSpecificFields;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'store_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequest
     */
    'token': string;
}
        /**
 * 
 * @export
 * @interface PurchaseRequestBillingAddress
 */
export interface PurchaseRequestBillingAddress {
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'identity_document'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'is_default'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'lat'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'lng'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestBillingAddress
     */
    'zipcode'?: string;
}
        /**
 * 
 * @export
 * @interface PurchaseRequestBrowserDetails
 */
export interface PurchaseRequestBrowserDetails {
    /**
     * 
     * @type {number}
     * @memberof PurchaseRequestBrowserDetails
     */
    'screen_height'?: number;
    /**
     * 
     * @type {number}
     * @memberof PurchaseRequestBrowserDetails
     */
    'screen_width'?: number;
}
        /**
 * 
 * @export
 * @interface PurchaseRequestCreditCard
 */
export interface PurchaseRequestCreditCard {
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'card_cvv'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'card_holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'card_holder_dni'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'card_integer'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'expiry_month'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'expiry_year'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'installments'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestCreditCard
     */
    'zip'?: string;
}
        /**
 * 
 * @export
 * @interface PurchaseRequestShippingAddress
 */
export interface PurchaseRequestShippingAddress {
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'identity_document'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'is_default'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'lat'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'lng'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestShippingAddress
     */
    'zipcode'?: string;
}
        /**
 * 
 * @export
 * @interface PurchaseRequestSpecificFields
 */
export interface PurchaseRequestSpecificFields {
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestSpecificFields
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseRequestSpecificFields
     */
    'financial_institution'?: string;
}
        /**
 * 
 * @export
 * @interface RegisterMerchantToken200Response
 */
export interface RegisterMerchantToken200Response {
    /**
     * 
     * @type {string}
     * @memberof RegisterMerchantToken200Response
     */
    'data'?: string;
}
        /**
 * 
 * @export
 * @interface TokenizeOrder200Response
 */
export interface TokenizeOrder200Response {
    /**
     * 
     * @type {TokenizeOrderRequestOrder}
     * @memberof TokenizeOrder200Response
     */
    'order'?: TokenizeOrderRequestOrder;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrder200Response
     */
    'order_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrder200Response
     */
    'token'?: string;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequest
 */
export interface TokenizeOrderRequest {
    /**
     * 
     * @type {TokenizeOrderRequestOrder}
     * @memberof TokenizeOrderRequest
     */
    'order'?: TokenizeOrderRequestOrder;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrder
 */
export interface TokenizeOrderRequestOrder {
    /**
     * 
     * @type {TokenizeOrderRequestOrderBillingAddress}
     * @memberof TokenizeOrderRequestOrder
     */
    'billing_address'?: TokenizeOrderRequestOrderBillingAddress;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'cash_change'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'currency'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof TokenizeOrderRequestOrder
     */
    'discounts'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'display_items_total_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'display_shipping_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'display_shipping_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'display_sub_total'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'display_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'display_total_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'display_total_discount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'display_total_tax_amount'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof TokenizeOrderRequestOrder
     */
    'gift_card'?: Array<object>;
    /**
     * 
     * @type {Array<TokenizeOrderRequestOrderItemsInner>}
     * @memberof TokenizeOrderRequestOrder
     */
    'items'?: Array<TokenizeOrderRequestOrderItemsInner>;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'items_total_amount'?: number;
    /**
     * 
     * @type {TokenizeOrderRequestOrderMetadata}
     * @memberof TokenizeOrderRequestOrder
     */
    'metadata'?: TokenizeOrderRequestOrderMetadata;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'order_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'payment_link'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'redirect_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'scheduled_at'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShipping}
     * @memberof TokenizeOrderRequestOrder
     */
    'shipping'?: TokenizeOrderRequestOrderShipping;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingAddress}
     * @memberof TokenizeOrderRequestOrder
     */
    'shipping_address'?: TokenizeOrderRequestOrderShippingAddress;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'shipping_amount'?: number;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingMethod}
     * @memberof TokenizeOrderRequestOrder
     */
    'shipping_method'?: TokenizeOrderRequestOrderShippingMethod;
    /**
     * 
     * @type {Array<object>}
     * @memberof TokenizeOrderRequestOrder
     */
    'shipping_methods'?: Array<object>;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingOptions}
     * @memberof TokenizeOrderRequestOrder
     */
    'shipping_options'?: TokenizeOrderRequestOrderShippingOptions;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'shipping_tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'store_code'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'sub_total'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'timezone'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'total_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'total_discount'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrder
     */
    'total_tax_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrder
     */
    'user_instructions'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof TokenizeOrderRequestOrder
     */
    'webhook_urls'?: Array<any>;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderBillingAddress
 */
export interface TokenizeOrderRequestOrderBillingAddress {
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'identity_document'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'last_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'lng'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'state_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderBillingAddress
     */
    'zipcode'?: string;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderItemsInner
 */
export interface TokenizeOrderRequestOrderItemsInner {
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'details_url'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'discounts'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'image_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'isbn'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'manufacturer'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'options'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'sku'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTaxAmount}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'tax_amount'?: TokenizeOrderRequestOrderItemsInnerTaxAmount;
    /**
     * 
     * @type {boolean}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'taxable'?: boolean;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTotalAmount}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'total_amount'?: TokenizeOrderRequestOrderItemsInnerTotalAmount;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'type'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerTaxAmount}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'unit_price'?: TokenizeOrderRequestOrderItemsInnerTaxAmount;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'uom'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'upc'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderItemsInnerWeight}
     * @memberof TokenizeOrderRequestOrderItemsInner
     */
    'weight'?: TokenizeOrderRequestOrderItemsInnerWeight;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderItemsInnerTaxAmount
 */
export interface TokenizeOrderRequestOrderItemsInnerTaxAmount {
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderItemsInnerTaxAmount
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerTaxAmount
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerTaxAmount
     */
    'currency_symbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerTaxAmount
     */
    'display_amount'?: string;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderItemsInnerTotalAmount
 */
export interface TokenizeOrderRequestOrderItemsInnerTotalAmount {
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderItemsInnerTotalAmount
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerTotalAmount
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerTotalAmount
     */
    'currency_symbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerTotalAmount
     */
    'display_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerTotalAmount
     */
    'display_original_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerTotalAmount
     */
    'display_total_discount'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderItemsInnerTotalAmount
     */
    'original_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderItemsInnerTotalAmount
     */
    'total_discount'?: number;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderItemsInnerWeight
 */
export interface TokenizeOrderRequestOrderItemsInnerWeight {
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderItemsInnerWeight
     */
    'unit'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderItemsInnerWeight
     */
    'weight'?: number;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderMetadata
 */
export interface TokenizeOrderRequestOrderMetadata {
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderMetadata
     */
    'channelId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderMetadata
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderMetadata
     */
    'seqVal'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderMetadata
     */
    'uid'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderMetadata
     */
    'vendorId'?: string;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderShipping
 */
export interface TokenizeOrderRequestOrderShipping {
    /**
     * 
     * @type {Array<object>}
     * @memberof TokenizeOrderRequestOrderShipping
     */
    'discounts'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShipping
     */
    'original_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShipping
     */
    'total_discount'?: number;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderShippingAddress
 */
export interface TokenizeOrderRequestOrderShippingAddress {
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'additional_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'address_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'first_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'identity_document'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'last_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'lng'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'state_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingAddress
     */
    'zipcode'?: string;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderShippingMethod
 */
export interface TokenizeOrderRequestOrderShippingMethod {
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'cost'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'display_cost'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'display_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'max_delivery_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'min_delivery_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'name'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'scheduler'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShippingMethod
     */
    'tax_amount'?: number;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderShippingOptions
 */
export interface TokenizeOrderRequestOrderShippingOptions {
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingOptionsDetails}
     * @memberof TokenizeOrderRequestOrderShippingOptions
     */
    'details'?: TokenizeOrderRequestOrderShippingOptionsDetails;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingOptions
     */
    'type'?: string;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderShippingOptionsDetails
 */
export interface TokenizeOrderRequestOrderShippingOptionsDetails {
    /**
     * 
     * @type {object}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetails
     */
    'additional_details'?: object;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetails
     */
    'address'?: string;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingOptionsDetailsAddressCoordinates}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetails
     */
    'address_coordinates'?: TokenizeOrderRequestOrderShippingOptionsDetailsAddressCoordinates;
    /**
     * 
     * @type {TokenizeOrderRequestOrderShippingOptionsDetailsContact}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetails
     */
    'contact'?: TokenizeOrderRequestOrderShippingOptionsDetailsContact;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetails
     */
    'store_name'?: string;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderShippingOptionsDetailsAddressCoordinates
 */
export interface TokenizeOrderRequestOrderShippingOptionsDetailsAddressCoordinates {
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetailsAddressCoordinates
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetailsAddressCoordinates
     */
    'lng'?: number;
}
        /**
 * 
 * @export
 * @interface TokenizeOrderRequestOrderShippingOptionsDetailsContact
 */
export interface TokenizeOrderRequestOrderShippingOptionsDetailsContact {
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetailsContact
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenizeOrderRequestOrderShippingOptionsDetailsContact
     */
    'phone'?: string;
}
        /**
 * 
 * @export
 * @interface UpdateMerchantRequest
 */
export interface UpdateMerchantRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'amplitude_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMerchantRequest
     */
    'auto_approve_order_in_core'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'domain'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'gtm_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'logo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMerchantRequest
     */
    'managed_by_duna'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateMerchantRequest
     */
    'order_api_port'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'order_api_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'short_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'status_changes_notification_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'storefront_base_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'storefront_private_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'timezone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantRequest
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMerchantRequest
     */
    'use_duna_send'?: boolean;
}
        /**
 * 
 * @export
 * @interface ValidateApplication200Response
 */
export interface ValidateApplication200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ValidateApplication200Response
     */
    'is_sandbox'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ValidateApplication200Response
     */
    'key_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidateApplication200Response
     */
    'merchant_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidateApplication200Response
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidateApplication200Response
     */
    'status'?: string;
}
    
        

    /**
    * CardsApi - axios parameter creator
    * @export
    */

    export const CardsApiAxiosParamCreator = function (configuration?: Configuration) {
    customAPI.refreshConfiguration(configuration);
    return {
        /**
        * Get Bin
            * @summary Bin detector
            * @param {string} bin 
            * @param {string} [xApiKey] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        binDetector: async (bin: string, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'bin' is not null or undefined
                    assertParamExists('binDetector', 'bin', configuration.bin);
            const localVarPath = `/cards/bin/{bin}`
                .replace(`{${"bin"}}`, encodeURIComponent(String(bin)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        }
        };



                    /**
                    * Request parameters for binDetector operation in CardsApi.
                    * @export
                    * @interface CardsApiBinDetectorRequest
                    */
                    export interface CardsApiBinDetectorRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof CardsApiBinDetector
                        */
                    bin: string

                        /**
                        * 
                        * @type {string}
                        * @memberof CardsApiBinDetector
                        */
                    xApiKey?: string
                    }

        /**
        * CardsApi - object-oriented interface
        * @export
        * @class CardsApi
        * @extends {BaseAPI}
        */
            export class CardsApi extends BaseAPI {
            /**
            * Get Bin
                * @summary Bin detector
                    * @param {CardsApiBinDetectorRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof CardsApi
            */

                public async binDetector(requestParameters: CardsApiBinDetectorRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = CardsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.binDetector(requestParameters.bin, requestParameters.xApiKey, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<BinDetector200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }

        }

    
        

    /**
    * MerchantApplicationApi - axios parameter creator
    * @export
    */

    export const MerchantApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    customAPI.refreshConfiguration(configuration);
    return {
        /**
        * Get application by ID
            * @summary Get Application
            * @param {string} merchantId 
            * @param {string} applicationId 
            * @param {string} [authorization] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getApplication: async (merchantId: string, applicationId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('getApplication', 'merchantId', configuration.merchantId);
                    // verify required parameter 'applicationId' is not null or undefined
                    assertParamExists('getApplication', 'applicationId', configuration.applicationId);
            const localVarPath = `/merchants/{merchant_id}/applications/{application_id}`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)))
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Get applications of merchant
            * @summary Get Applications
            * @param {string} merchantId 
            * @param {string} [authorization] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getApplications: async (merchantId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('getApplications', 'merchantId', configuration.merchantId);
            const localVarPath = `/merchants/{merchant_id}/applications`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Create application
            * @summary Create Application
            * @param {string} merchantId 
            * @param {string} [authorization] 
            * @param {MerchantsMerchantIdApplicationsPostRequest} [merchantsMerchantIdApplicationsPostRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        merchantsMerchantIdApplicationsPost: async (merchantId: string, authorization?: string, merchantsMerchantIdApplicationsPostRequest?: MerchantsMerchantIdApplicationsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('merchantsMerchantIdApplicationsPost', 'merchantId', configuration.merchantId);
            const localVarPath = `/merchants/{merchant_id}/applications`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(merchantsMerchantIdApplicationsPostRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Validate application
            * @summary Validate Application
            * @param {string} [xApiKey] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        validateApplication: async (xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/applications/validate`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        }
        };



                    /**
                    * Request parameters for getApplication operation in MerchantApplicationApi.
                    * @export
                    * @interface MerchantApplicationApiGetApplicationRequest
                    */
                    export interface MerchantApplicationApiGetApplicationRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantApplicationApiGetApplication
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantApplicationApiGetApplication
                        */
                    applicationId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantApplicationApiGetApplication
                        */
                    authorization?: string
                    }

                    /**
                    * Request parameters for getApplications operation in MerchantApplicationApi.
                    * @export
                    * @interface MerchantApplicationApiGetApplicationsRequest
                    */
                    export interface MerchantApplicationApiGetApplicationsRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantApplicationApiGetApplications
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantApplicationApiGetApplications
                        */
                    authorization?: string
                    }

                    /**
                    * Request parameters for merchantsMerchantIdApplicationsPost operation in MerchantApplicationApi.
                    * @export
                    * @interface MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest
                    */
                    export interface MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsPost
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsPost
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {MerchantsMerchantIdApplicationsPostRequest}
                        * @memberof MerchantApplicationApiMerchantsMerchantIdApplicationsPost
                        */
                    merchantsMerchantIdApplicationsPostRequest?: MerchantsMerchantIdApplicationsPostRequest
                    }

                    /**
                    * Request parameters for validateApplication operation in MerchantApplicationApi.
                    * @export
                    * @interface MerchantApplicationApiValidateApplicationRequest
                    */
                    export interface MerchantApplicationApiValidateApplicationRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantApplicationApiValidateApplication
                        */
                    xApiKey?: string
                    }

        /**
        * MerchantApplicationApi - object-oriented interface
        * @export
        * @class MerchantApplicationApi
        * @extends {BaseAPI}
        */
            export class MerchantApplicationApi extends BaseAPI {
            /**
            * Get application by ID
                * @summary Get Application
                    * @param {MerchantApplicationApiGetApplicationRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantApplicationApi
            */

                public async getApplication(requestParameters: MerchantApplicationApiGetApplicationRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantApplicationApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getApplication(requestParameters.merchantId, requestParameters.applicationId, requestParameters.authorization, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<MerchantsMerchantIdApplicationsPost200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Get applications of merchant
                * @summary Get Applications
                    * @param {MerchantApplicationApiGetApplicationsRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantApplicationApi
            */

                public async getApplications(requestParameters: MerchantApplicationApiGetApplicationsRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantApplicationApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getApplications(requestParameters.merchantId, requestParameters.authorization, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetApplications200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Create application
                * @summary Create Application
                    * @param {MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantApplicationApi
            */

                public async merchantsMerchantIdApplicationsPost(requestParameters: MerchantApplicationApiMerchantsMerchantIdApplicationsPostRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantApplicationApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.merchantsMerchantIdApplicationsPost(requestParameters.merchantId, requestParameters.authorization, requestParameters.merchantsMerchantIdApplicationsPostRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<MerchantsMerchantIdApplicationsPost200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Validate application
                * @summary Validate Application
                    * @param {MerchantApplicationApiValidateApplicationRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantApplicationApi
            */

                public async validateApplication(requestParameters: MerchantApplicationApiValidateApplicationRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantApplicationApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.validateApplication(requestParameters.xApiKey, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<ValidateApplication200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }

        }

    
        

    /**
    * MerchantsApi - axios parameter creator
    * @export
    */

    export const MerchantsApiAxiosParamCreator = function (configuration?: Configuration) {
    customAPI.refreshConfiguration(configuration);
    return {
        /**
        * Canceling an order
            * @summary Cancel an order
            * @param {string} orderToken 
            * @param {string} [xApiKey] 
            * @param {CancelRequest} [cancelRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        cancel: async (orderToken: string, xApiKey?: string, cancelRequest?: CancelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'orderToken' is not null or undefined
                    assertParamExists('cancel', 'orderToken', configuration.orderToken);
            const localVarPath = `/merchants/orders/{order_token}/cancel`
                .replace(`{${"order_token"}}`, encodeURIComponent(String(orderToken)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(cancelRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Create merchant
            * @summary Create merchant
            * @param {string} [authorization] 
            * @param {CreateMerchantRequest} [createMerchantRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        createMerchant: async (authorization?: string, createMerchantRequest?: CreateMerchantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(createMerchantRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Create Merchant Store
            * @summary Create Merchant Store
            * @param {string} merchantId 
            * @param {string} [authorization] 
            * @param {string} [xApiKey] 
            * @param {CreateMerchantStoreRequest} [createMerchantStoreRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        createMerchantStore: async (merchantId: string, authorization?: string, xApiKey?: string, createMerchantStoreRequest?: CreateMerchantStoreRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('createMerchantStore', 'merchantId', configuration.merchantId);
            const localVarPath = `/merchants/{merchant_id}/stores`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }

                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(createMerchantStoreRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Create Public Key
            * @summary Create Public Key
            * @param {string} merchantId 
            * @param {string} [authorization] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        createPublicKey: async (merchantId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('createPublicKey', 'merchantId', configuration.merchantId);
            const localVarPath = `/merchants/{merchant_id}/public-keys`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Get All Merchants
            * @summary Get All Merchants
            * @param {string} [authorization] 
            * @param {string} [xApiKey] 
            * @param {string} [page] 
            * @param {string} [pageSize] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getAllMerchants: async (authorization?: string, xApiKey?: string, page?: string, pageSize?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants-all`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                    if (page !== undefined) {
                            localVarQueryParameter['page'] = page;
                    }

                    if (pageSize !== undefined) {
                            localVarQueryParameter['page_size'] = pageSize;
                    }

                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }

                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Get merchant
            * @summary Get merchant
            * @param {string} merchantId 
            * @param {string} [authorization] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getMerchant: async (merchantId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('getMerchant', 'merchantId', configuration.merchantId);
            const localVarPath = `/merchants/{merchant_id}`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Get Merchant Store
            * @summary Get Merchant Stores
            * @param {string} merchantId 
            * @param {string} [authorization] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getMerchantStores: async (merchantId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('getMerchantStores', 'merchantId', configuration.merchantId);
            const localVarPath = `/merchants/{merchant_id}/stores`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Getting Merchant Information
            * @summary Get Information
            * @param {string} [authorization] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getMerchantToken: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants-tokens/me`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Register Merchant User
            * @summary Register Merchant User
            * @param {string} [authorization] 
            * @param {GetMerchantUsersRequest} [getMerchantUsersRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getMerchantUsers: async (authorization?: string, getMerchantUsersRequest?: GetMerchantUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchant-users`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(getMerchantUsersRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Getting an order by token
            * @summary Get an order
            * @param {string} orderToken 
            * @param {string} [xApiKey] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getOrder: async (orderToken: string, xApiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'orderToken' is not null or undefined
                    assertParamExists('getOrder', 'orderToken', configuration.orderToken);
            const localVarPath = `/merchants/orders/{order_token}`
                .replace(`{${"order_token"}}`, encodeURIComponent(String(orderToken)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Identity Token
            * @summary Identity Token
            * @param {string} [authorization] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        identityToken: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/identity-token`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Make a Merchant Login
            * @summary Login
            * @param {LoginRequest} [loginRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        login: async (loginRequest?: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/login`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)



        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Make the payment of the order.
            * @summary Make the payment of the order.
            * @param {string} [authorization] 
            * @param {string} [xApiKey] 
            * @param {string} [xMerchantID] 
            * @param {string} [xStoreCode] 
            * @param {string} [xDeviceId] 
            * @param {string} [xSessionId] 
            * @param {string} [userAgent] 
            * @param {PurchaseRequest} [purchaseRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        purchase: async (authorization?: string, xApiKey?: string, xMerchantID?: string, xStoreCode?: string, xDeviceId?: string, xSessionId?: string, userAgent?: string, purchaseRequest?: PurchaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/transactions/purchase`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }

                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }

                    if (xMerchantID != null) {
                        localVarHeaderParameter['X-Merchant-ID'] = String(xMerchantID);
                    }

                    if (xStoreCode != null) {
                        localVarHeaderParameter['X-Store-Code'] = String(xStoreCode);
                    }

                    if (xDeviceId != null) {
                        localVarHeaderParameter['X-Device-Id'] = String(xDeviceId);
                    }

                    if (xSessionId != null) {
                        localVarHeaderParameter['X-Session-Id'] = String(xSessionId);
                    }

                    if (userAgent != null) {
                        localVarHeaderParameter['User-Agent'] = String(userAgent);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(purchaseRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Register Merchant Token
            * @summary Register Merchant Token
            * @param {string} merchantId 
            * @param {string} [authorization] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        registerMerchantToken: async (merchantId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('registerMerchantToken', 'merchantId', configuration.merchantId);
            const localVarPath = `/merchants/{merchant_id}/tokens`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication Authorization required


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Register Merchant User
            * @summary Register Merchant User
            * @param {string} [authorization] 
            * @param {GetMerchantUsersRequest} [getMerchantUsersRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        registerMerchantUser: async (authorization?: string, getMerchantUsersRequest?: GetMerchantUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/users`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(getMerchantUsersRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Succesing an order
            * @summary Success an order
            * @param {string} orderToken 
            * @param {string} [xApiKey] 
            * @param {CancelRequest} [cancelRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        success: async (orderToken: string, xApiKey?: string, cancelRequest?: CancelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'orderToken' is not null or undefined
                    assertParamExists('success', 'orderToken', configuration.orderToken);
            const localVarPath = `/merchants/orders/{order_token}/success`
                .replace(`{${"order_token"}}`, encodeURIComponent(String(orderToken)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(cancelRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Tokenize an order
            * @summary Tokenize an order
            * @param {string} [xApiKey] 
            * @param {string} [authorization] 
            * @param {TokenizeOrderRequest} [tokenizeOrderRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        tokenizeOrder: async (xApiKey?: string, authorization?: string, tokenizeOrderRequest?: TokenizeOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/orders`;
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (xApiKey != null) {
                        localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
                    }

                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(tokenizeOrderRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        /**
        * Update merchant
            * @summary Update merchant
            * @param {string} merchantId 
            * @param {string} [authorization] 
            * @param {UpdateMerchantRequest} [updateMerchantRequest] 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        updateMerchant: async (merchantId: string, authorization?: string, updateMerchantRequest?: UpdateMerchantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
                    // verify required parameter 'merchantId' is not null or undefined
                    assertParamExists('updateMerchant', 'merchantId', configuration.merchantId);
            const localVarPath = `/merchants/{merchant_id}`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId)));
            if(customAPI.getToken() !== null && customAPI.getToken() !== undefined){
            options.headers  = {
            'Authorization': `Bearer ${customAPI.getToken()}`,
            ...options.headers
            }
            }
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                // authentication X-Api-Key required
                        await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


                    if (authorization != null) {
                        localVarHeaderParameter['Authorization'] = String(authorization);
                    }


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                localVarRequestOptions.data = serializeDataIfNeeded(updateMerchantRequest, localVarRequestOptions, configuration)

            return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
            };
            },
        }
        };



                    /**
                    * Request parameters for cancel operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiCancelRequest
                    */
                    export interface MerchantsApiCancelRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiCancel
                        */
                    orderToken: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiCancel
                        */
                    xApiKey?: string

                        /**
                        * 
                        * @type {CancelRequest}
                        * @memberof MerchantsApiCancel
                        */
                    cancelRequest?: CancelRequest
                    }

                    /**
                    * Request parameters for createMerchant operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiCreateMerchantRequest
                    */
                    export interface MerchantsApiCreateMerchantRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiCreateMerchant
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {CreateMerchantRequest}
                        * @memberof MerchantsApiCreateMerchant
                        */
                    createMerchantRequest?: CreateMerchantRequest
                    }

                    /**
                    * Request parameters for createMerchantStore operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiCreateMerchantStoreRequest
                    */
                    export interface MerchantsApiCreateMerchantStoreRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiCreateMerchantStore
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiCreateMerchantStore
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiCreateMerchantStore
                        */
                    xApiKey?: string

                        /**
                        * 
                        * @type {CreateMerchantStoreRequest}
                        * @memberof MerchantsApiCreateMerchantStore
                        */
                    createMerchantStoreRequest?: CreateMerchantStoreRequest
                    }

                    /**
                    * Request parameters for createPublicKey operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiCreatePublicKeyRequest
                    */
                    export interface MerchantsApiCreatePublicKeyRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiCreatePublicKey
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiCreatePublicKey
                        */
                    authorization?: string
                    }

                    /**
                    * Request parameters for getAllMerchants operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiGetAllMerchantsRequest
                    */
                    export interface MerchantsApiGetAllMerchantsRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetAllMerchants
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetAllMerchants
                        */
                    xApiKey?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetAllMerchants
                        */
                    page?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetAllMerchants
                        */
                    pageSize?: string
                    }

                    /**
                    * Request parameters for getMerchant operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiGetMerchantRequest
                    */
                    export interface MerchantsApiGetMerchantRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetMerchant
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetMerchant
                        */
                    authorization?: string
                    }

                    /**
                    * Request parameters for getMerchantStores operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiGetMerchantStoresRequest
                    */
                    export interface MerchantsApiGetMerchantStoresRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetMerchantStores
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetMerchantStores
                        */
                    authorization?: string
                    }

                    /**
                    * Request parameters for getMerchantToken operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiGetMerchantTokenRequest
                    */
                    export interface MerchantsApiGetMerchantTokenRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetMerchantToken
                        */
                    authorization?: string
                    }

                    /**
                    * Request parameters for getMerchantUsers operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiGetMerchantUsersRequest
                    */
                    export interface MerchantsApiGetMerchantUsersRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetMerchantUsers
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {GetMerchantUsersRequest}
                        * @memberof MerchantsApiGetMerchantUsers
                        */
                    getMerchantUsersRequest?: GetMerchantUsersRequest
                    }

                    /**
                    * Request parameters for getOrder operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiGetOrderRequest
                    */
                    export interface MerchantsApiGetOrderRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetOrder
                        */
                    orderToken: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiGetOrder
                        */
                    xApiKey?: string
                    }

                    /**
                    * Request parameters for identityToken operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiIdentityTokenRequest
                    */
                    export interface MerchantsApiIdentityTokenRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiIdentityToken
                        */
                    authorization?: string
                    }

                    /**
                    * Request parameters for login operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiLoginRequest
                    */
                    export interface MerchantsApiLoginRequest {
                        /**
                        * 
                        * @type {LoginRequest}
                        * @memberof MerchantsApiLogin
                        */
                    loginRequest?: LoginRequest
                    }

                    /**
                    * Request parameters for purchase operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiPurchaseRequest
                    */
                    export interface MerchantsApiPurchaseRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiPurchase
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiPurchase
                        */
                    xApiKey?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiPurchase
                        */
                    xMerchantID?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiPurchase
                        */
                    xStoreCode?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiPurchase
                        */
                    xDeviceId?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiPurchase
                        */
                    xSessionId?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiPurchase
                        */
                    userAgent?: string

                        /**
                        * 
                        * @type {PurchaseRequest}
                        * @memberof MerchantsApiPurchase
                        */
                    purchaseRequest?: PurchaseRequest
                    }

                    /**
                    * Request parameters for registerMerchantToken operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiRegisterMerchantTokenRequest
                    */
                    export interface MerchantsApiRegisterMerchantTokenRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiRegisterMerchantToken
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiRegisterMerchantToken
                        */
                    authorization?: string
                    }

                    /**
                    * Request parameters for registerMerchantUser operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiRegisterMerchantUserRequest
                    */
                    export interface MerchantsApiRegisterMerchantUserRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiRegisterMerchantUser
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {GetMerchantUsersRequest}
                        * @memberof MerchantsApiRegisterMerchantUser
                        */
                    getMerchantUsersRequest?: GetMerchantUsersRequest
                    }

                    /**
                    * Request parameters for success operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiSuccessRequest
                    */
                    export interface MerchantsApiSuccessRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiSuccess
                        */
                    orderToken: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiSuccess
                        */
                    xApiKey?: string

                        /**
                        * 
                        * @type {CancelRequest}
                        * @memberof MerchantsApiSuccess
                        */
                    cancelRequest?: CancelRequest
                    }

                    /**
                    * Request parameters for tokenizeOrder operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiTokenizeOrderRequest
                    */
                    export interface MerchantsApiTokenizeOrderRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiTokenizeOrder
                        */
                    xApiKey?: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiTokenizeOrder
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {TokenizeOrderRequest}
                        * @memberof MerchantsApiTokenizeOrder
                        */
                    tokenizeOrderRequest?: TokenizeOrderRequest
                    }

                    /**
                    * Request parameters for updateMerchant operation in MerchantsApi.
                    * @export
                    * @interface MerchantsApiUpdateMerchantRequest
                    */
                    export interface MerchantsApiUpdateMerchantRequest {
                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiUpdateMerchant
                        */
                    merchantId: string

                        /**
                        * 
                        * @type {string}
                        * @memberof MerchantsApiUpdateMerchant
                        */
                    authorization?: string

                        /**
                        * 
                        * @type {UpdateMerchantRequest}
                        * @memberof MerchantsApiUpdateMerchant
                        */
                    updateMerchantRequest?: UpdateMerchantRequest
                    }

        /**
        * MerchantsApi - object-oriented interface
        * @export
        * @class MerchantsApi
        * @extends {BaseAPI}
        */
            export class MerchantsApi extends BaseAPI {
            /**
            * Canceling an order
                * @summary Cancel an order
                    * @param {MerchantsApiCancelRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async cancel(requestParameters: MerchantsApiCancelRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.cancel(requestParameters.orderToken, requestParameters.xApiKey, requestParameters.cancelRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<void>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Create merchant
                * @summary Create merchant
                    * @param {MerchantsApiCreateMerchantRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async createMerchant(requestParameters: MerchantsApiCreateMerchantRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.createMerchant(requestParameters.authorization, requestParameters.createMerchantRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<CreateMerchant200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Create Merchant Store
                * @summary Create Merchant Store
                    * @param {MerchantsApiCreateMerchantStoreRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async createMerchantStore(requestParameters: MerchantsApiCreateMerchantStoreRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.createMerchantStore(requestParameters.merchantId, requestParameters.authorization, requestParameters.xApiKey, requestParameters.createMerchantStoreRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<CreateMerchantStore200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Create Public Key
                * @summary Create Public Key
                    * @param {MerchantsApiCreatePublicKeyRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async createPublicKey(requestParameters: MerchantsApiCreatePublicKeyRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.createPublicKey(requestParameters.merchantId, requestParameters.authorization, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<CreatePublicKey201Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Get All Merchants
                * @summary Get All Merchants
                    * @param {MerchantsApiGetAllMerchantsRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async getAllMerchants(requestParameters: MerchantsApiGetAllMerchantsRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMerchants(requestParameters.authorization, requestParameters.xApiKey, requestParameters.page, requestParameters.pageSize, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetAllMerchants200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Get merchant
                * @summary Get merchant
                    * @param {MerchantsApiGetMerchantRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async getMerchant(requestParameters: MerchantsApiGetMerchantRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchant(requestParameters.merchantId, requestParameters.authorization, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetMerchant200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Get Merchant Store
                * @summary Get Merchant Stores
                    * @param {MerchantsApiGetMerchantStoresRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async getMerchantStores(requestParameters: MerchantsApiGetMerchantStoresRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantStores(requestParameters.merchantId, requestParameters.authorization, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetMerchantStores200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Getting Merchant Information
                * @summary Get Information
                    * @param {MerchantsApiGetMerchantTokenRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async getMerchantToken(requestParameters: MerchantsApiGetMerchantTokenRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantToken(requestParameters.authorization, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetMerchantToken200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Register Merchant User
                * @summary Register Merchant User
                    * @param {MerchantsApiGetMerchantUsersRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async getMerchantUsers(requestParameters: MerchantsApiGetMerchantUsersRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantUsers(requestParameters.authorization, requestParameters.getMerchantUsersRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetMerchantUsers200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Getting an order by token
                * @summary Get an order
                    * @param {MerchantsApiGetOrderRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async getOrder(requestParameters: MerchantsApiGetOrderRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(requestParameters.orderToken, requestParameters.xApiKey, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetOrder200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Identity Token
                * @summary Identity Token
                    * @param {MerchantsApiIdentityTokenRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async identityToken(requestParameters: MerchantsApiIdentityTokenRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.identityToken(requestParameters.authorization, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<IdentityToken200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Make a Merchant Login
                * @summary Login
                    * @param {MerchantsApiLoginRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async login(requestParameters: MerchantsApiLoginRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.login(requestParameters.loginRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<Login200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Make the payment of the order.
                * @summary Make the payment of the order.
                    * @param {MerchantsApiPurchaseRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async purchase(requestParameters: MerchantsApiPurchaseRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.purchase(requestParameters.authorization, requestParameters.xApiKey, requestParameters.xMerchantID, requestParameters.xStoreCode, requestParameters.xDeviceId, requestParameters.xSessionId, requestParameters.userAgent, requestParameters.purchaseRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<Purchase200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Register Merchant Token
                * @summary Register Merchant Token
                    * @param {MerchantsApiRegisterMerchantTokenRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async registerMerchantToken(requestParameters: MerchantsApiRegisterMerchantTokenRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.registerMerchantToken(requestParameters.merchantId, requestParameters.authorization, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<RegisterMerchantToken200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Register Merchant User
                * @summary Register Merchant User
                    * @param {MerchantsApiRegisterMerchantUserRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async registerMerchantUser(requestParameters: MerchantsApiRegisterMerchantUserRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.registerMerchantUser(requestParameters.authorization, requestParameters.getMerchantUsersRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetMerchantUsers200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Succesing an order
                * @summary Success an order
                    * @param {MerchantsApiSuccessRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async success(requestParameters: MerchantsApiSuccessRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.success(requestParameters.orderToken, requestParameters.xApiKey, requestParameters.cancelRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<void>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Tokenize an order
                * @summary Tokenize an order
                    * @param {MerchantsApiTokenizeOrderRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async tokenizeOrder(requestParameters: MerchantsApiTokenizeOrderRequest = {}, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.tokenizeOrder(requestParameters.xApiKey, requestParameters.authorization, requestParameters.tokenizeOrderRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<TokenizeOrder200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }


            /**
            * Update merchant
                * @summary Update merchant
                    * @param {MerchantsApiUpdateMerchantRequest} requestParameters Request parameters.
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof MerchantsApi
            */

                public async updateMerchant(requestParameters: MerchantsApiUpdateMerchantRequest, options?: AxiosRequestConfig) {
                const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(this.configuration);
                try {
                const localVarAxiosArgs = await localVarAxiosParamCreator.updateMerchant(requestParameters.merchantId, requestParameters.authorization, requestParameters.updateMerchantRequest, options);
                const axiosRequestArgs = {
                ...localVarAxiosArgs.options,
                url: (this.basePath || BASE_PATH) + localVarAxiosArgs.url
                };
                const response = await axiosInstance.request<GetMerchant200Response>(axiosRequestArgs);

                return {data : response.data};
                } catch(e) {
                return {
                error: e
                }
                }
                }

        }

    
